<!-- The contents of this page are &copy; Copyright 1996 Elwood Corp. -->
<!-- <A HREF=index.htm>See title page.</A> -->

<HTML>
<HEAD>
<TITLE>Eclipse: Lisp Implementation in C</TITLE>
</HEAD>

<H2>Eclipse C: Implementation of Lisp</H2>
<hr>

The header file <CODE>&quot;eclipse.h&quot;</CODE> must be included in
any C code which uses Eclipse <a
href="gloss.htm#utility"><i>utility</i></a>.  The text
<code>#include &lt;eclipse&gt;</code> appears at the head of all C
files generated by Eclipse <a
href="compile.htm"><b>compile-file</b></a>.

<p><CODE>&quot;eclipse.h&quot;</CODE> describes in detail how <A
HREF="concept.htm">Lisp concepts</a> map to C concepts.  Some of the
information documented in <CODE>&quot;eclipse.h&quot;</CODE> includes:

<UL>
<LI> Representation of all Lisp data using the <code>clObject</code>
<em>typedef</em>.

<LI> Representation of Lisp functions as C functions, the use of
<code>vararg</code> and the termination of arguments to C function
that represent Lisp functions with <code>clEOA</code>.
</UL>

<P>
In Eclipse, there are some special features of automatic memory
management:

<UL>
<LI> <CODE>clObject</CODE>s are not moved by the garbage collector.
This type of garbage collector is called <em>non-relocating</em>.

<LI> The garbage collector looks at the C stack and variables in
determining whether Lisp data is currently being used by functions or
held in global variables.  This type of garbage collector is called
<em>conservative</em>.  

</UL>

Together, this means that Lisp data can be held directly in C
variables without the complicated <em>registration</em> indirections
required in other Lisp systems.

<P>


<HR>
<A HREF="terminology.htm">[Previous]</A> <A HREF="names.htm">[Next]</A> 
<A HREF="c.htm">[Up]</A> 
<A HREF="eclipse.htm">[Documentation Contents]</A>
 <A HREF="http://www.elwood.com/eclipse-info">[Eclipse Home Page]</A>

</BODY>
</HTML>
