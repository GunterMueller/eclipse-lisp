<!-- The contents of this page are &copy; Copyright 1996 Elwood Corp. -->
<!-- <A HREF=index.htm>See title page.</A> -->

<HTML>
<HEAD>
<TITLE>Eclipse: COMPILE-FILE</TITLE>
</HEAD>

Eclipse behavior for<BR>
<I>Function</I> <B>COMPILE-FILE</B><P>

<B>Syntax:</B><P>

Eclipse defines the following additional <a
href="defined.htm#package"><EM>&KEY</EM></a> argument for the
<b>compile-file</b> function:

<P>
<I>loader-name</I> -- a <em>symbol</em>.  The default is the result of
interning the result of <CODE>(pathname-name <I>output-pathname</I> :case
:common)</CODE> in the current <em>package</em>.

<P>
<I>output-format</I> --- a <a href="gloss.htm#cfofd"><i>compile-file
output format designator</I></a>.  Complicated defaulting
behavior. See below.<P>

<B>Description:</B><P>

<i>Output-pathname</i> is the pathname as returned by
<b>compile-file-pathname</b>.  If <I>output-format</I> is specified as <CODE>:C</CODE>, the
<I>type</I> component of <I>output-pathname</I> will default to "C"
(<code>:common :case</code>).  Otherwise, it defaults to "BIN".

<P>
<I>Output-format</I> defaults to a keyword created from the pathname
<I>type</I> component of <I>output-pathname</I>.

<P>
If <I>output-format</I> is <CODE>:DEFAULT</CODE>,
<CODE>:BIN</CODE>, or <CODE>:BYTE</CODE>, the result is a file
of <I>implementation-dependent</I> format, suitable for use by
<b>load</b>.  The format is independent of the Lisp image.  Moreover,
all implementations of Eclipse can <b>load</B> files of this format,
even if they were produced by <b>compile-file</b> on an implementation
of Eclipse for a different platform than the one in which <b>load</b> is
executed.  <i>Loader-name</i> is not used for this <i>output-format</i>.

<P>
If <I>output-format</I> is <CODE>:C</CODE>, the result is an ASCII C
file.  This file defines an <a href="gloss.htm#init"><I>init
function</I></a> who's name is specified by <I>loader-name</I>.  The C
file must be compiled by a C compiler and linked with the Eclipse
library.  The resulting <a
href="gloss.htm#application">application</a> must call the appropriate
<a href="gloss.htm#sys-init"><I>system initialization functions</I></a>
before calling the <a href="gloss.htm#init"><I>init function</I></a>.
Calling the <a href="gloss.htm#init"><I>init function</I></a> results
in the same behavior that occurs when a </CODE>:DEFAULT</CODE> format
file is <b>load</B>ed.  After that, the application can use any <a
href="gloss.htm"><i>utilities</I></a> defined in the file as though
they were a part of the Eclipse library.

<p>
<b>Examples:</b><p>

<pre>
; Compile a file to C.
(in-package :user)
(compile-file "foo" 'output-format :c)

; Specify a different loader name.
(compile-file "foo" 'output-format :c 'loader-name 'initialize-foo)

; Specify that foo.lisp contains only ASCII characters.
(compile-file "foo" 'output-format :c
                    'loader-name 'initialize-foo
		    :external-format :ascii)

; Create a C version of foo.lisp, in the src subdirectory.
; It is not necessary to specify OUTPUT-FORMAT because OUTPUT-FILE
; specifies a c file.  
(compile-file "foo" :output-file "src/foo.c" :external-format :ascii)

</pre>

<P>
<B>See Also:</B><P>

The <a href="defined.htm#package"><i>Packages</i></A> section of <a
href="defined.htm">&quot;Eclipse-Defined ANSI Features&quot;</a>, the
<a href="char.htm#repertoire"><i>Character Repertoires</i></a> and <a
href="char.htm#streams"><i>Interaction with Streams</I></a> sections
of <a href="char.htm">&quot;Characters in Eclipse&quot;</a>, <a
href="load.htm"><b>load</b></a>.<P>

<B>Notes:</B> <P>

The package of the <I>loader-name</I> and <I>output-format</I>
<I>&key</I> designators is the <a
href="defined.htm#package"><CODE>ECLIPSE</CODE></A> package.

<P>
The current <em>package</em> used in creating the default value for
<i>loader-name</I> is the package at the time <b>compile-file</b> is
called; it is not effected by <b>in-package</b> forms within the file.

<p>
When a Lisp source file or a <code>:default</code> format
<em>compiled file</em> is <b>load</b>ed, <b>*package*</b> and
<b>*readtable*</b> are bound during the <b>load</b> to the values they
had before, while <b>*load-truename*</b> and <b>*load-pathname*</b> are
bound to appropriate values.  The <i>init function</i> generated by a
<CODE>:C</CODE> format <em>compiled file</em> also binds all four of
these.  However, the actual values to which <b>*load-truename*</b> and
<b>*load-pathname*</b> are bound is not specified.

<p>
Reader macros, including read-time feature conditionalization, are
processed at read time, and are not present in <em>compiled
files</em>.  If the same <code>:default</code> format <em>compiled
file</em> is to be used on several different platforms, and it is
desired to have different behavior on different platforms, than it is
necessary to define the different behavior using conditionals at
load-time or at run-time.

<p>
ANSI defines <b>compile-file</b> to accept an <i>external-format</i>
<a href="defined.htm#package"><EM>&KEY</EM></a> argument, but not an
<i>element-type</i> argument.  This is because compiling a source file
must handle any implementation-supported character.  The Eclipse
implementation of <b>compile-file</b> recognizes that only
<b>base-char</b>s can be read using the <code>:ASCII</code>
<i>external-format</i>.  The consequence is that when the
<code>:ASCII</code> <i>external-format</i> is specified for
<b>compile-file</b>, <em>string</em> literals will be of <em>type</em>
<b>base-string</b>.  Otherwise, it is only specified that these will
be of <em>type</em> <b>string</b>.  This is important because when
coalescing any string literal, the <em>file compiler</em> is not
allowed to change the actual <em>element-type</em>.  String literals
that are read as <b>string</b>s and not as <b>base-string</b>s must
appear in <em>compiled files</em> with <b>character</b>
<em>element-types</em>.

<P>
Note that regardless of <i>external-format</i>, implementations are
allowed to copy and perform other optimizations on the names used to
intern symbols.  Eclipse may convert <b>string</b> <b>symbol-names</b>
that happen to contain only <b>base-char</b> elements to
<b>base-string</b> during compilation.

<HR>
<A HREF="char-bit.htm">[Previous]</A> 
<A HREF="exitf.htm">[Next]</A> 
<a href="dict.htm">[Up]</a>
<A HREF="eclipse.htm">[Documentation Contents]</A>
 <A HREF="http://www.elwood.com/eclipse-info">[Eclipse Home Page]</A>

</BODY>
</HTML>
