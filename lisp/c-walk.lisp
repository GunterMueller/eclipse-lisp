(defparameter *header-files* '("<eclipse.h>"))

(defvar *c-file-compiler-env-interned-objects* nil)
(defstruct (C-FILE-COMPILER-ENV
	    (:include file-compiler-env
		      (basic-constants *c-file-compiler-env-interned-objects*)))
  (include-files *header-files*)
  (function-declarations (make-hash-table :test #'equal)))

(setq *c-file-compiler-env-interned-objects*
      (initialize-common-interned-objects (make-c-file-compiler-env)))


(defun c-prototypes (s dynamic-env)
  (let ((fdecs (c-file-compiler-env-function-declarations dynamic-env))
	(types nil))
    (maphash #'(lambda (name ftype)
		 (push name (getf types
				  (implementation-type
				   dynamic-env
				   (return-type (third ftype))))))
	     fdecs)
    (loop for (type functions) on types by #'cddr
	  do (pprint-logical-block (s (sort functions #'string<
					    :key #'function-name-key)
				      :suffix ";")
	       (c-typedef s type) (write-char #\space s)
	       (pprint-indent :block 2 s)
	       (loop
		(let ((name (pprint-pop)))
		  (destructuring-bind (ftype args &rest ignore)
		      (gethash name fdecs)
		    (declare (ignore ignore))
		    (c-global-function s name)
		    (cond ((eq ftype 'ec:function)
			   (write-string " __P((" s)
			   (if args
			       (loop for (arg . more) on args
				     if (eq arg '&rest)
				     return (progn
					      (c-typedef s (implementation-type
							    dynamic-env
							    (car more)))
					      (write-string ", ..." s))
				     do (c-typedef s (implementation-type
						      dynamic-env arg))
				     when more do (write-string ", " s))
			       (c-typedef s 'ec:void))
			   (write-string "))" s))
			  (t (write-string "(clProto)" s)))
		    (pprint-exit-if-list-exhausted)
		    (write-string ", " s)
		    (pprint-newline :fill s)))))
	  do (terpri s)
	  #+old-code
	  (format s
		  #"~@<~2i~/eclipse:c-typedef/ ~{~/eclipse:c-global-function/(clProto)~^, ~};~:@>~%"
		  type (sort functions #'string<
			     :key #'function-name-key)))
    (terpri s)))

(defmethod WALK-INSTRUCTIONS ((dynamic-env c-file-compiler-env)
			      instructions s loader)
  (unless (eq s t)
    (format s #"~@</* ~;Generated by ~a ~a ~@[for ~a ~]on ~a. ~/eclipse:date/.~; */~:@>~%"
	    (lisp-implementation-type) (lisp-implementation-version)
	    (user-id) (machine-instance)
	    (get-universal-time)))
  (dolist (file (reverse (c-file-compiler-env-include-files dynamic-env))
		(terpri s))
    (format s #"#include ~a~%" file))
  (with-c-syntax
   (c-prototypes s dynamic-env)
   (let ((constants (get-constants-names
		     (file-compiler-env-external-constants dynamic-env))))
     (when constants
       (format s #"~@<extern ~/eclipse:c-typedef/ ~2i~{~w~^, ~};~:@>~2%"
	       'object constants)))
   (let ((constants (get-constants-names
		     (file-compiler-env-constants dynamic-env))))
     (when constants
       (format s #"~@<static ~/eclipse:c-typedef/ ~2i~{~w~^, ~};~:@>~2%"
	       'object constants)))
   (dolist (def (nreverse (compiler-env-functions dynamic-env)))
     (let ((privatep (pop def))
	   (rtype (pop def))
	   (name (pop def))
	   (args (pop def))
	   (envp (pop def)))
       (when envp (format s #"clDeclareEnv(~w);~%" name))
       (format s #"~:[~;static ~]~/eclipse:c-typedef/ ~w~
                  ~:[ clVdecl(_ap)~;~:*~{ ~:/eclipse:series/ ~/eclipse:statements/~}~]~@
                  ~:[~*~w~;~@<{ ~;clUseEnv(~w); ~_~w~; }~:>~]~2%"
	       privatep rtype name args envp name (pop def))))
   (format s #"void ~/eclipse:c-global-function/ __P((void)) ~@
               ~@<{ ~;~/eclipse:statements/ ~_~_~/eclipse:statements/ ~_~/eclipse:statement/~; }~:@>~%"
	   loader
	   `((dbind *package*) (dbind *readtable*)
	     (dbind *load-truename*) (dbind *load-pathname*)
	     ,@(compiler-env-inits dynamic-env))
	   instructions
	   '(unwind 4)))
  s)

(defconstant *default-fdeclaration* '(function (&rest args) t))
  
(defmethod REGISTER-CALL ((dynamic-env c-file-compiler-env) function declarations)
  #+lisp-host
  (when (cl-symbol-p function)
    (return-from register-call
      (register-call dynamic-env (intern (symbol-name function) :eclipse) declarations)))
  (let* ((ftype (getf declarations 'ftype))
	 (function-type (first ftype)))
    (case function-type
      ((ec:macro ec:function)
       (let ((files (cdddr ftype)))
	 (dolist (file files)
	   (pushnew file
		    (c-file-compiler-env-include-files
		     dynamic-env)
		    :test #'equal)))))
    (case function-type
      (ec:macro)
      (t
       (unless (member function *preregistered-c-operators*)
	 (setf (gethash function
			(c-file-compiler-env-function-declarations
			 dynamic-env))
	       (or ftype *default-fdeclaration*)))))))