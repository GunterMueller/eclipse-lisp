;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 6.2 DATA TYPE PREDICATES                                     ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 6.2.1 GENERAL TYPE PREDICATES

;;; TYPEP
(deftest typep-t (typep nil t) t)
(deftest typep-nil (typep nil nil) nil)
#-(and cmu (not eclipse))
(progn
  (deftest typep-boolean1 (typep nil 'boolean) t)
  (deftest typep-boolean2 (typep t 'boolean) t)
  (deftest typep-boolean3 (typep 'true 'boolean) nil))
(deftest typep-boolean4 (typep t 'function) nil)

(deftest typep-function1 (typep '(lambda (x) x) 'function) nil)
(deftest typep-function2 (typep #'(lambda (x) x) 'function) t)
(deftest typep-function3 (typep #'list 'function) t)
(defparameter a-function (coerce '(lambda (x) x) 'function))
(deftest typep-function4 (typep a-function  'compiled-function) nil)
(deftest typep-function5 (typep #'list 'compiled-function) t)
(deftest typep-function6 (typep a-function 'function) t)

(deftest typep-satisfies1 (typep 2 '(satisfies evenp)) t)
(deftest typep-satisfies2 (typep 3 '(satisfies evenp)) nil)

(deftest typep-member1 (typep 2 '(member)) nil)
(deftest typep-member2 (typep 2 '(member 1 2)) t)
(deftest typep-member3 (typep 2 '(member 1 3)) nil)
#-(and cmu (not eclipse))
(progn
  (deftest typep-eql1 (typep 2 '(eql 1)) nil)
  (deftest typep-eql2 (typep 2 '(eql 2)) t))

(deftest typep-not1 (typep 3 '(not float)) t)
(deftest typep-not2 (typep 3 '(not integer)) nil)

(deftest typep-and1 (typep 3 '(and)) t)
(deftest typep-and2 (typep 3 '(and integer)) t)
(deftest typep-and3 (typep 3 '(and integer (satisfies oddp))) t)
(deftest typep-and4 (typep 3 '(and integer (satisfies evenp))) nil)
(deftest typep-and5 (typep 3 '(and float (satisfies unknown))) nil)

(deftest typep-or1 (typep 3 '(or)) nil)
(deftest typep-or2 (typep 3 '(or integer)) t)
(deftest typep-or3 (typep 3 '(or float (satisfies oddp))) t)
(deftest typep-or4 (typep 3 '(or integer (satisfies evenp))) t)

(deftest typep-integer1 (typep 12 'integer) t)
(deftest typep-integer2 (typep (1+ most-positive-fixnum) 'integer) t)
(deftest typep-integer3 (typep (1+ most-positive-fixnum) 'fixnum) nil)
(deftest typep-integer4 (typep (1+ most-positive-fixnum) 'bignum) t)
(deftest typep-integer5 (typep 1 '(mod 2)) t)
(deftest typep-integer6 (typep 2 '(mod 2)) nil)
(deftest typep-integer7 (typep -1 '(mod 2)) nil)
(deftest typep-integer8 (typep -1 'bit) nil)
(deftest typep-integer9 (typep 0 'bit) t)
(deftest typep-integer10 (typep 1 'bit) t)
(deftest typep-integer11 (typep 2 'bit) nil)
(deftest typep-integer12 (typep 10 'integer) t)
(deftest typep-integer13 (typep 10 '(integer)) t)
(deftest typep-integer14 (typep 10.0f0 '(integer)) nil)
(deftest typep-integer15 (typep 10 '(integer * 10)) t)
(deftest typep-integer16 (typep 10 '(integer * (10))) nil)
(deftest typep-integer17 (typep 10 '(integer * (11))) t)
(deftest typep-integer18 (typep 10 '(integer 10)) t)
(deftest typep-integer19 (typep 10 '(integer (10))) nil)
(deftest typep-integer20 (typep 10 '(integer (9))) t)
(deftest typep-integer21 (typep 10 '(integer 10 *)) t)
(deftest typep-integer22 (typep 10 '(integer (10) *)) nil)
(deftest typep-integer23 (typep 10 '(integer (9) *)) t)
(deftest typep-integer24 (typep 11 '(integer 10 12)) t)
(deftest typep-integer25 (typep 12 '(integer 10 12)) t)
(deftest typep-integer26 (typep 12 '(integer 10 12)) t)
(deftest typep-integer27 (typep 12 'unsigned-byte) t)
(deftest typep-integer28 (typep 12 '(unsigned-byte)) t)
(deftest typep-integer29 (typep 12 '(unsigned-byte *)) t)
(deftest typep-integer30 (typep -12 'unsigned-byte) nil)
(deftest typep-integer31 (typep -12 '(unsigned-byte)) nil)
(deftest typep-integer32 (typep -12 '(unsigned-byte *)) nil)
(deftest typep-integer34 (typep -7 '(unsigned-byte 3)) nil)
(deftest typep-integer35 (typep 7 '(unsigned-byte 3)) t)
(deftest typep-integer36 (typep 8 '(unsigned-byte 3)) nil)
(deftest typep-integer37 (typep 12 'signed-byte) t)
(deftest typep-integer38 (typep 12 '(signed-byte)) t)
(deftest typep-integer39 (typep 12 '(signed-byte *)) t)
(deftest typep-integer40 (typep -12 'signed-byte) t)
(deftest typep-integer41 (typep -12 '(signed-byte)) t)
(deftest typep-integer42 (typep -12 '(signed-byte *)) t)
(deftest typep-integer44 (typep -7 '(signed-byte 3)) nil)
(deftest typep-integer44a (typep -3 '(signed-byte 3)) t)
(deftest typep-integer45 (typep 3 '(signed-byte 3)) t)
(deftest typep-integer46 (typep 7 '(signed-byte 3)) nil)
(deftest typep-integer47 (typep 12.0f0 'signed-byte) nil)


(deftest type-ratio1 (typep 3 'ratio) nil)
(deftest type-ratio2 (typep 3/4 'ratio) t)
(deftest type-rational1 (typep 3 'rational) t)
(deftest type-rational2 (typep 3/4 'rational) t)
(deftest type-rational4 (typep 3.0f0 'rational) nil)
(deftest type-rational5 (typep 3 '(rational)) t)
(deftest type-rational6 (typep 3/4 '(rational)) t)
(deftest type-rational7 (typep 3.0f0 '(rational)) nil)
(deftest type-rational8 (typep 3 '(rational *)) t)
(deftest type-rational9 (typep 3/4 '(rational *)) t)
(deftest type-rational10 (typep 3.0f0 '(rational *)) nil)
(deftest type-rational11 (typep 3 '(rational * 3)) t)
(deftest type-rational12 (typep 3/4 '(rational * 1)) t)
(deftest type-rational13 (typep 3.0f0 '(rational * 1)) nil)
(deftest type-rational14 (typep 3 '(rational * (3))) nil)
(deftest type-rational15 (typep 3/4 '(rational * (1))) t)
(deftest type-rational16 (typep 3/4 '(rational * (3/4))) nil)
(deftest type-rational17 (typep 3/4 '(rational * (7/8))) t)
(deftest type-rational18 (typep 3 '(rational 3)) t)
(deftest type-rational19 (typep 3/4 '(rational 0)) t)
(deftest type-rational20 (typep 3 '(rational (3))) nil)
(deftest type-rational21 (typep 3/4 '(rational (0))) t)
(deftest type-rational22 (typep 3/4 '(rational (3/4))) nil)
(deftest type-rational23 (typep 3/4 '(rational (1/2))) t)

(deftest typep-float12 (typep 10.0f0 'float) t)
(deftest typep-float13 (typep 10.0f0 '(float)) t)
(deftest typep-float14 (typep 10 '(float)) nil)
(deftest typep-float15 (typep 10.0f0 '(float * 10.0f0)) t)
(deftest typep-float16 (typep 10.0f0 '(float * (10.0f0))) nil)
(deftest typep-float17 (typep 10.0f0 '(float * (11.0f0))) t)
(deftest typep-float18 (typep 10.0f0 '(float 10.0f0)) t)
(deftest typep-float19 (typep 10.0d0 '(float (10.0d0))) nil)
(deftest typep-float20 (typep 10.0d0 '(float (9.0d0))) t)
(deftest typep-float21 (typep 10.0d0 '(float 10.0d0 *)) t)
(deftest typep-float22 (typep 10.0d0 '(float (10.0d0) *)) nil)
(deftest typep-float23 (typep 10.0d0 '(float (9.0d0) *)) t)
(deftest typep-float24 (typep 11.0d0 '(float 10.0d0 12.0d0)) t)
(deftest typep-float25 (typep 12.0d0 '(float 10.0d0 12.0d0)) t)
(deftest typep-float26 (typep 12.0d0 '(float 10.0d0 12.0d0)) t)

(deftest typep-short-float12 (typep 10.0s0 'short-float) t)
(deftest typep-short-float13 (typep 10.0s0 '(short-float)) t)
(deftest typep-short-float14 (typep 10.0d0 '(short-float)) nil)
(deftest typep-short-float15 (typep 10.0s0 '(short-float * 10.0s0)) t)
(deftest typep-short-float16 (typep 10.0s0 '(short-float * (10.0s0))) nil)
(deftest typep-short-float17 (typep 10.0s0 '(short-float * (11.0s0))) t)
(deftest typep-short-float18 (typep 10.0s0 '(short-float 10.0s0)) t)
(deftest typep-short-float19 (typep 10.0s0 '(short-float (10.0s0))) nil)
(deftest typep-short-float20 (typep 10.0s0 '(short-float (9.0s0))) t)
(deftest typep-short-float21 (typep 10.0s0 '(short-float 10.0s0 *)) t)
(deftest typep-short-float22 (typep 10.0s0 '(short-float (10.0s0) *)) nil)
(deftest typep-short-float23 (typep 10.0s0 '(short-float (9.0s0) *)) t)
(deftest typep-short-float24 (typep 11.0s0 '(short-float 10.0s0 12.0s0)) t)
(deftest typep-short-float25 (typep 12.0s0 '(short-float 10.0s0 12.0s0)) t)
(deftest typep-short-float26 (typep 12.0s0 '(short-float 10.0s0 12.0s0)) t)

(deftest typep-single-float12 (typep 10.0f0 'single-float) t)
(deftest typep-single-float13 (typep 10.0f0 '(single-float)) t)
(deftest typep-single-float14 (typep 10.0d0 '(single-float)) nil)
(deftest typep-single-float15 (typep 10.0f0 '(single-float * 10.0f0)) t)
(deftest typep-single-float16 (typep 10.0f0 '(single-float * (10.0f0))) nil)
(deftest typep-single-float17 (typep 10.0f0 '(single-float * (11.0f0))) t)
(deftest typep-single-float18 (typep 10.0f0 '(single-float 10.0f0)) t)
(deftest typep-single-float19 (typep 10.0f0 '(single-float (10.0f0))) nil)
(deftest typep-single-float20 (typep 10.0f0 '(single-float (9.0f0))) t)
(deftest typep-single-float21 (typep 10.0f0 '(single-float 10.0f0 *)) t)
(deftest typep-single-float22 (typep 10.0f0 '(single-float (10.0f0) *)) nil)
(deftest typep-single-float23 (typep 10.0f0 '(single-float (9.0f0) *)) t)
(deftest typep-single-float24 (typep 11.0f0 '(single-float 10.0f0 12.0f0)) t)
(deftest typep-single-float25 (typep 12.0f0 '(single-float 10.0f0 12.0f0)) t)
(deftest typep-single-float26 (typep 12.0f0 '(single-float 10.0f0 12.0f0)) t)

(deftest typep-double-float12 (typep 10.0d0 'double-float) t)
(deftest typep-double-float13 (typep 10.0d0 '(double-float)) t)
(deftest typep-double-float14 (typep 10.0f0 '(double-float)) nil)
(deftest typep-double-float15 (typep 10.0d0 '(double-float * 10.0d0)) t)
(deftest typep-double-float16 (typep 10.0d0 '(double-float * (10.0d0))) nil)
(deftest typep-double-float17 (typep 10.0d0 '(double-float * (11.0d0))) t)
(deftest typep-double-float18 (typep 10.0d0 '(double-float 10.0d0)) t)
(deftest typep-double-float19 (typep 10.0d0 '(double-float (10.0d0))) nil)
(deftest typep-double-float20 (typep 10.0d0 '(double-float (9.0d0))) t)
(deftest typep-double-float21 (typep 10.0d0 '(double-float 10.0d0 *)) t)
(deftest typep-double-float22 (typep 10.0d0 '(double-float (10.0d0) *)) nil)
(deftest typep-double-float23 (typep 10.0d0 '(double-float (9.0d0) *)) t)
(deftest typep-double-float24 (typep 11.0d0 '(double-float 10.0d0 12.0d0)) t)
(deftest typep-double-float25 (typep 12.0d0 '(double-float 10.0d0 12.0d0)) t)
(deftest typep-double-float26 (typep 12.0d0 '(double-float 10.0d0 12.0d0)) t)


(deftest typep-long-float12 (typep 10.0l0 'long-float) t)
(deftest typep-long-float13 (typep 10.0l0 '(long-float)) t)
(deftest typep-long-float14 (typep 10 '(long-float)) nil)
(deftest typep-long-float15 (typep 10.0l0 '(long-float * 10.0l0)) t)
(deftest typep-long-float16 (typep 10.0l0 '(long-float * (10.0l0))) nil)
(deftest typep-long-float17 (typep 10.0l0 '(long-float * (11.0l0))) t)
(deftest typep-long-float18 (typep 10.0l0 '(long-float 10.0l0)) t)
(deftest typep-long-float19 (typep 10.0l0 '(long-float (10.0l0))) nil)
(deftest typep-long-float20 (typep 10.0l0 '(long-float (9.0l0))) t)
(deftest typep-long-float21 (typep 10.0l0 '(long-float 10.0l0 *)) t)
(deftest typep-long-float22 (typep 10.0l0 '(long-float (10.0l0) *)) nil)
(deftest typep-long-float23 (typep 10.0l0 '(long-float (9.0l0) *)) t)
(deftest typep-long-float24 (typep 11.0l0 '(long-float 10.0l0 12.0l0)) t)
(deftest typep-long-float25 (typep 12.0l0 '(long-float 10.0l0 12.0l0)) t)
(deftest typep-long-float26 (typep 12.0l0 '(long-float 10.0l0 12.0l0)) t)

(deftest type-real1 (typep 3 'real) t)
(deftest type-real2 (typep 3/4 'real) t)
(deftest type-real4 (typep 3.0f0 'real) t)
(deftest type-real5 (typep 3 '(real)) t)
(deftest type-real6 (typep 3/4 '(real)) t)
(deftest type-real7 (typep 3.0f0 '(real)) t)
(deftest type-real8 (typep 3 '(real *)) t)
(deftest type-real9 (typep 3/4 '(real *)) t)
(deftest type-real10 (typep 3.0f0 '(real *)) t)
(deftest type-real11 (typep 3 '(real * 3)) t)
(deftest type-real12 (typep 3/4 '(real * 1)) t)
(deftest type-real13 (typep 3.0f0 '(real * 1)) nil)
(deftest type-real14 (typep 3 '(real * (3))) nil)
(deftest type-real15 (typep 3/4 '(real * (1))) t)
(deftest type-real16 (typep 3/4 '(real * (3/4))) nil)
(deftest type-real17 (typep 3/4 '(real * (7/8))) t)
(deftest type-real18 (typep 3 '(real 3)) t)
(deftest type-real19 (typep 3/4 '(real 0)) t)
(deftest type-real20 (typep 3 '(real (3))) nil)
(deftest type-real21 (typep 3/4 '(real (0))) t)
(deftest type-real22 (typep 3/4 '(real (3/4))) nil)
(deftest type-real23 (typep 3/4 '(real (1/2))) t)

(deftest typep-real12a (typep 10.0f0 'real) t)
(deftest typep-real13a (typep 10.0f0 '(real)) t)
(deftest typep-real14a (typep 10 '(real)) t)
(deftest typep-real15a (typep 10.0f0 '(real * 10.0f0)) t)
(deftest typep-real16a (typep 10.0f0 '(real * (10.0f0))) nil)
(deftest typep-real17a (typep 10.0f0 '(real * (11.0f0))) t)
(deftest typep-real18a (typep 10.0f0 '(real 10.0f0)) t)
(deftest typep-real19a (typep 10.0d0 '(real (10.0d0))) nil)
(deftest typep-real20a (typep 10.0d0 '(real (9.0d0))) t)
(deftest typep-real21a (typep 10.0d0 '(real 10.0d0 *)) t)
(deftest typep-real22a (typep 10.0d0 '(real (10.0d0) *)) nil)
(deftest typep-real23a (typep 10.0d0 '(real (9.0d0) *)) t)
(deftest typep-real24a (typep 11.0d0 '(real 10.0d0 12.0d0)) t)
(deftest typep-real25a (typep 12.0d0 '(real 10.0d0 12.0d0)) t)
(deftest typep-real26a (typep 12.0d0 '(real 10.0d0 12.0d0)) t)

(deftest typep-complex1 (typep 1 'complex) nil)
(deftest typep-complex2 (typep #c(1 1) 'complex) t)
(deftest typep-complex3 (typep #c(1 1) '(complex)) t)
(deftest typep-complex5 (typep #c(1 1) '(complex *)) t)
;;; CMU can't handle some complex specifiers.
#-(and cmu (not eclipse))
(progn
  ;; This first one works in cmu interpreter, but not compiled.
  (deftest typep-complex6 (typep #c(1 1) '(complex integer)) t)
  (deftest typep-complex4 (typep #c(1 1) '(complex t)) t)
  (deftest typep-complex7 (typep #c(1 1) '(complex (eql 1))) t)
  (deftest typep-complex8 (typep #c(0 0) '(complex (eql 1))) nil)
  (deftest typep-complex9 (typep #c(1 1) '(complex float)) t)
  (deftest typep-complex10 (typep #c(1.0f0 1.0f0) '(complex integer)) nil))

(deftest typep-cons1 (typep #c(1 1) 'cons) nil)
(deftest typep-cons2 (typep #(1 1) 'cons) nil)
(deftest typep-cons3 (typep '(1 . 1) 'cons) t)
(deftest typep-cons4 (typep '(1 . 1) '(cons)) t)
(deftest typep-cons5 (typep '(1 . 1) '(cons *)) t)
(deftest typep-cons6 (typep '(1 . 2.0f0) '(cons * *)) t)
(deftest typep-cons7 (typep '(1 . 2.0f0) '(cons bit *)) t)
(deftest typep-cons8 (typep '(1 . 2.0f0) '(cons bit float)) t)
(deftest typep-cons9 (typep '(1 . 2.0f0) '(cons bit bit)) nil)
(deftest typep-cons10 (typep '(1 . 2.0f0) '(cons symbol float)) nil)
(deftest typep-cons11 (typep '(1 . 2.0f0) '(cons * float)) t)

(deftest typep-a1 (typep (make-array 0 :element-type 'bit) '(array bit)) t)
(deftest typep-a2 (typep (make-array 0 :element-type 'base-char) '(array base-char)) t)
(deftest typep-a3 (typep (make-array 0 :element-type 'character) '(array character)) t)
(deftest typep-a4 (typep (make-array 0 :element-type 'character) '(array base-char)) nil)
(deftest typep-a5 (typep (make-array 0 :element-type 'base-char) '(array character)) nil)
(deftest typep-a6 (typep (make-array 0 :element-type 'bit) '(array t)) nil)
(deftest typep-a7 (typep (make-array 0 :element-type 'base-char) '(array t)) nil)
(deftest typep-a8 (typep (make-array 0 :element-type 'character) '(array t)) nil)
(deftest typep-a9 (typep (make-array 0 :element-type 'symbol) '(array t)) t)
(deftest typep-a10 (typep (make-array 0 :element-type 'bit) '(array *)) t)
(deftest typep-a11 (typep (make-array 0 :element-type 'base-char) '(array *)) t)
(deftest typep-a12 (typep (make-array 0 :element-type 'character) '(array *)) t)
(deftest typep-a13 (typep (make-array 0 :element-type 'symbol) '(array *)) t)
(deftest typep-a14 (typep (make-array 0 :element-type 'bit) '(array)) t)
(deftest typep-a15 (typep (make-array 0 :element-type 'base-char) '(array)) t)
(deftest typep-a16 (typep (make-array 0 :element-type 'character) '(array)) t)
(deftest typep-a17 (typep (make-array 0 :element-type 'symbol) '(array)) t)

(deftest typep-b1  (typep (make-array 3 :element-type 'bit) '(simple-array bit)) t)
(deftest typep-b2  (typep (make-array 3 :element-type 'base-char) '(simple-array base-char)) t)
(deftest typep-b3  (typep (make-array 3 :element-type 'character) '(simple-array character)) t)
(deftest typep-b4  (typep (make-array 3 :element-type 'character) '(simple-array base-char)) nil)
(deftest typep-b5  (typep (make-array 3 :element-type 'base-char) '(simple-array character)) nil)
(deftest typep-b6  (typep (make-array 3 :element-type 'bit) '(simple-array t)) nil)
(deftest typep-b7  (typep (make-array 3 :element-type 'base-char) '(simple-array t)) nil)
(deftest typep-b8  (typep (make-array 3 :element-type 'character) '(simple-array t)) nil)
(deftest typep-b9  (typep (make-array 3 :element-type 'symbol) '(simple-array t)) t)
(deftest typep-b10 (typep (make-array 3 :element-type 'bit) '(simple-array *)) t)
(deftest typep-b11 (typep (make-array 3 :element-type 'base-char) '(simple-array *)) t)
(deftest typep-b12 (typep (make-array 3 :element-type 'character) '(simple-array *)) t)
(deftest typep-b13 (typep (make-array 3 :element-type 'symbol) '(simple-array *)) t)
(deftest typep-b14 (typep (make-array 3 :element-type 'bit) '(simple-array)) t)
(deftest typep-b15 (typep (make-array 3 :element-type 'base-char) '(simple-array)) t)
(deftest typep-b16 (typep (make-array 3 :element-type 'character) '(simple-array)) t)
(deftest typep-b17 (typep (make-array 3 :element-type 'symbol) '(simple-array)) t)

(deftest typep-c1  (typep (make-array '(2 3)) '(array * *)) t)
(deftest typep-c2  (typep (make-array '(2 3)) '(array * 2)) t)
(deftest typep-c3  (typep (make-array '(2 3)) '(array * 3)) nil)
(deftest typep-c4  (typep (make-array '(2 3)) '(array * (2 3))) t)
(deftest typep-c5  (typep (make-array '(2 3)) '(array * (2 2))) nil)
(deftest typep-c6  (typep (make-array '(2 3)) '(array * (2 3 *))) nil)
(deftest typep-c7  (typep (make-array '(2 3)) '(array * (2 *))) t)
(deftest typep-c8  (typep (make-array '(2 3)) '(array * (* *))) t)
(deftest typep-c9  (typep (make-array '(2 3)) '(array * (* 3))) t)
(deftest typep-c10 (typep (make-array '(2 3)) '(array * (* 2))) nil)
(deftest typep-c11 (typep (make-array '(2 3)) '(array * (* * *))) nil)
(deftest typep-c12 (typep (make-array '()) '(array * ())) t)
(deftest typep-c13 (typep (make-array '()) '(array * *)) t)
(deftest typep-c14 (typep (make-array '()) '(array * (*))) nil)

(deftest typep-d1
    (typep (make-array 3 :element-type 'character :fill-pointer t) 'array) t)
(deftest typep-d2
    (typep (make-array 3 :element-type 'base-char :fill-pointer t) 'array) t)
(deftest typep-d3
    (typep (make-array 3 :element-type 'bit :fill-pointer t) 'array) t)
(deftest typep-d4
    (typep (make-array 3 :element-type 't :fill-pointer t) 'array) t)
(deftest typep-d5
    (typep (make-array 3 :element-type 'character :fill-pointer t) 'simple-array) nil)
(deftest typep-d6
    (typep (make-array 3 :element-type 'base-char :fill-pointer t) 'simple-array) nil)
(deftest typep-d7
    (typep (make-array 3 :element-type 'bit :fill-pointer t) 'simple-array) nil)
(deftest typep-d8
    (typep (make-array 3 :element-type 't :fill-pointer t) 'simple-array) nil)


(deftest typep-string1 (typep "abc" 'string) t)
(deftest typep-string2 (typep "abc" '(string)) t)
(deftest typep-string3 (typep "abc" '(string *)) t)
(deftest typep-string4 (typep "abc" '(string 3)) t)
(deftest typep-string5 (typep "abc" '(string 4)) nil)
(deftest typep-string6 (typep #(#\a #\b #\c) '(string 3)) nil)
(deftest typep-string7 (typep #(#\a #\b #\c) 'string) nil)
(deftest typep-string8
    (typep (make-array 3 :element-type 'base-char :fill-pointer t) 'string) t)
(deftest typep-string9
    (typep (make-array 3 :element-type 'character :fill-pointer t) 'string) t)

(deftest typep-simple-string1 (typep "abc" 'simple-string) t)
(deftest typep-simple-string2 (typep "abc" '(simple-string)) t)
(deftest typep-simple-string3 (typep "abc" '(simple-string *)) t)
(deftest typep-simple-string4 (typep "abc" '(simple-string 3)) t)
(deftest typep-simple-string5 (typep "abc" '(simple-string 4)) nil)
(deftest typep-simple-string6 (typep #(#\a #\b #\c) '(simple-string 3)) nil)
(deftest typep-simple-string7 (typep #(#\a #\b #\c) 'simple-string) nil)
(deftest typep-simple-string8
    (typep (make-array 3 :element-type 'base-char :fill-pointer t) 'simple-string) nil)
(deftest typep-simple-string9
    (typep (make-array 3 :element-type 'character :fill-pointer nil) 'simple-string) t)

(deftest typep-base-string1 (typep "abc" 'base-string) t)
(deftest typep-base-string2 (typep "abc" '(base-string)) t)
(deftest typep-base-string3 (typep "abc" '(base-string *)) t)
(deftest typep-base-string4 (typep "abc" '(base-string 3)) t)
(deftest typep-base-string5 (typep "abc" '(base-string 4)) nil)
(deftest typep-base-string6 (typep #(#\a #\b #\c) '(base-string 3)) nil)
(deftest typep-base-string7 (typep #(#\a #\b #\c) 'base-string) nil)
(deftest typep-base-string8
    (typep (make-array 3 :element-type 'base-char :fill-pointer t) 'base-string) t)
(deftest typep-base-string9
    (typep (make-array 3 :element-type 'character :fill-pointer t) 'base-string) nil)

(deftest typep-simple-base-string1 (typep "abc" 'simple-base-string) t)
(deftest typep-simple-base-string2 (typep "abc" '(simple-base-string)) t)
(deftest typep-simple-base-string3 (typep "abc" '(simple-base-string *)) t)
(deftest typep-simple-base-string4 (typep "abc" '(simple-base-string 3)) t)
(deftest typep-simple-base-string5 (typep "abc" '(simple-base-string 4)) nil)
(deftest typep-simple-base-string6 (typep #(#\a #\b #\c) '(simple-base-string 3)) nil)
(deftest typep-simple-base-string7 (typep #(#\a #\b #\c) 'simple-base-string) nil)
(deftest typep-simple-base-string8
    (typep (make-array 3 :element-type 'base-char :fill-pointer t) 'simple-base-string) nil)
(deftest typep-simple-base-string9
    (typep (make-array 3 :element-type 'character :fill-pointer nil) 'simple-base-string) nil)

(deftest typep-bit-vector1
    (typep (make-array 3 :element-type 'bit :fill-pointer t) 'bit-vector) t)
(deftest typep-bit-vector2
    (typep (make-array 3 :element-type 'bit :fill-pointer nil) 'simple-bit-vector) t)
(deftest typep-bit-vector3
    (typep (make-array 3 :element-type 'bit :fill-pointer t) 'simple-bit-vector) nil)
(deftest typep-bit-vector4
    (typep (make-array 3 :element-type 't :fill-pointer t) 'bit-vector) nil)
(deftest typep-bit-vector5
    (typep (make-array 3 :element-type 'bit) '(bit-vector 3)) t)
(deftest typep-bit-vector6
    (typep (make-array 3 :element-type 'bit) '(bit-vector 4)) nil)
(deftest typep-bit-vector7
    (typep (make-array 3 :element-type 'bit) '(bit-vector)) t)
(deftest typep-bit-vector8
    (typep (make-array 3 :element-type 'bit) '(bit-vector *)) t)

(deftest typep-vector1
    (typep (make-array 3 :element-type 'bit :fill-pointer t) 'vector) t)
(deftest typep-vector2
    (typep (make-array 3 :element-type 'bit :fill-pointer nil) 'simple-vector) nil)
(deftest typep-vector3
    (typep (make-array 3 :element-type 'base-char :fill-pointer nil) 'simple-vector) nil)
(deftest typep-vector4
    (typep (make-array 3 :element-type 'character :fill-pointer nil) 'simple-vector) nil)
(deftest typep-vector5
    (typep (make-array 3 :element-type 't :fill-pointer t) 'vector) t)
(deftest typep-vector6
    (typep (make-array 3 :element-type 't :fill-pointer t) 'simple-vector) nil)
(deftest typep-vector7
    (typep (make-array 3 :element-type 't :fill-pointer nil) 'simple-vector) t)
(deftest typep-vector8 (typep (make-array 3) '(vector t 3)) t)
(deftest typep-vector9 (typep (make-array 3) '(vector t 4)) nil)
(deftest typep-vector10 (typep (make-array 3) '(vector)) t)
(deftest typep-vector11 (typep (make-array 3) '(vector t *)) t)
(deftest typep-vector11a (typep (make-array 3) '(vector *)) t)
(deftest typep-vector12 (typep (make-array 3) '(simple-vector 3)) t)
(deftest typep-vector13 (typep (make-array 3) '(simple-vector 4)) nil)
(deftest typep-vector14 (typep (make-array 3) '(simple-vector)) t)
(deftest typep-vector15 (typep (make-array 3) '(simple-vector *)) t)
(deftest typep-vector16 (typep (make-array 3 :element-type 'bit) '(vector bit)) t)
(deftest typep-vector17 (typep (make-array 3 :element-type 'bit) '(vector t)) nil)
(deftest typep-vector18 (typep (make-array 3 :element-type 'bit) '(vector *)) t)
