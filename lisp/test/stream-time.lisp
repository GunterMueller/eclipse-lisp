(defparameter *inner-times2* 100)
(defmacro stream-time-test (&body body)
  `(let ((s *standard-output*))
     (dotimes (i 3)
       (cl:time (cl:dotimes (j *inner-times2*) ,@body)))))

(defmacro string-stream-time-test (&body body)
  `(dotimes (i 3)
     (with-output-to-string (s)
       (cl:time (cl:dotimes (j *inner-times2*) ,@body)))))

(defun char-test () (stream-time-test (write-char #\x s)) (finish-output))
(defun char-test2 () (stream-time-test (write-char #\x s) (finish-output s)))
(defun string-test () (stream-time-test (write-string "abc" s)) (finish-output))
(defun string-test2 () (stream-time-test (write-string "abc" s) (finish-output s)))
(defun format-string-test () (stream-time-test (format s "abc~a\n" "xyz")))
(defun format-char-test () (stream-time-test (format s "abc~c\n" #\x)))
(defun format-integer-test () (stream-time-test (format s "abc~d\n" 2)))

(defun string-char-test () (string-stream-time-test (write-char #\x s)) (finish-output))
(defun string-string-test () (string-stream-time-test (write-string "abc" s)) (finish-output))
(defun string-format-string-test () (string-stream-time-test (format s "abc~a\n" "xyz")))

(defun formatter-string-test () (stream-time-test (format s (formatter "abc~a\n") "xyz")))
(defun formatter-char-test () (stream-time-test (format s (formatter "abc~c\n") #\x)))
(defun formatter-integer-test () (stream-time-test (format s (formatter "abc~d\n") 2)))

(defun stream-time ()
  (cl:format t "~2&CHAR ") (char-test)
  (cl:format t "~2&CHAR2 ") (char-test2)
  (cl:format t "~2&STRING ") (string-test)
  (cl:format t "~2&STRING2 ") (string-test2)
  (cl:format t "~2&FORMAT-STRING ") (format-string-test)
  (cl:format t "~2&FORMAT-CHAR ") (format-char-test)
  (cl:format t "~2&FORMAT-INTEGER ") (format-integer-test)
  (cl:format t "~2&STRING-CHAR ") (string-char-test)
  (cl:format t "~2&STRING-STRING ") (string-string-test)
  (cl:format t "~2&STRING-FORMAT-STRING ") (string-format-string-test)
  #|(cl:format t "~2&FORMATTER-STRING ") (formatter-string-test)
  (cl:format t "~2&FORMATTER-CHAR ") (formatter-char-test)
  (cl:format t "~2&FORMATTER-INTEGER ") (formatter-integer-test)|#)

#|
(setq collector (make-string-output-stream))
(defun time-it (n s)
  (dotimes (i 3)
    (cl:time (cl:dotimes (j *inner-times2*)
			 (write-char #\x s)))))
|#