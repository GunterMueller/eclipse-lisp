;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 12.5 IRRATIONAL AND TRANSCENDENTAL FUNCTIONS                 ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 12.5.1 EXPONENTIAL AND LOGARITHMIC FUNCTIONS
;;; EXP
(deftest exp-int (exp 1) 2.718281828459045f0)
(deftest exp-single (exp 1.0f0) 2.718281828459045f0)
(deftest exp-double (within-tolerance (exp 1.0d0) 2.7182818284590455d0) t)
(deftest exp-rat (exp 1/2) 1.6487212f0)
(deftest exp-rat-big (exp #xffffffff/efffffffe) 1.0689391f0)
(deftest exp-complex-fixnum (exp #c(1 2)) #c(-1.1312044f0 2.4717266f0))
(deftest exp-complex-single (exp #c(1.0f0 2.0f0)) #c(-1.1312044f0 2.4717266f0))
(deftest exp-complex-double
    (within-tolerance (exp #c(1.0d0 2.0d0))
		      #C(-1.1312043837568138d0 2.471726672004819d0))
  t)
(deftest exp-complex-rat (exp #c(1/2 3/4)) #c(1.2063509f0 1.1238323f0))
(deftest exp-complex-rat-big (exp #c(#xffffffff/efffffffe #xeffffffe/ffffffff))
  #c(0.6326036f0 0.8616516f0))
(deftest exp-int-minus (exp -1) 0.36787945f0)
(deftest exp-single-minus (exp -1.0f0) 0.36787945f0)
(deftest exp-double-minus (exp -1.0d0) 0.36787944117144233d0)
(deftest exp-rat-minus (exp -1/2) 0.60653067f0)
(deftest exp-rat-big-minus (exp #x-ffffffff/efffffffe) 0.935507f0)
(deftest exp-complex-fixnum-minus
  (within-tolerance (exp #c(-1 -2)) #c(-0.153091866f0 -0.33451182f0)) t)
(deftest exp-complex-single-minus
  (within-tolerance (exp #c(-1.0f0 -2.0f0)) #c(-0.153091866f0 -0.33451182f0)) t)
(deftest exp-complex-double-minus
    (within-tolerance (exp #c(-1.0d0 -2.0d0))
		      #c(-0.153091865674226307d0 -0.33451182923926226d0))
  t)
(deftest exp-complex-rat-minus (exp #c(-1/2 -3/4)) #c(0.44379172f0 -0.41343483f0))
(deftest exp-complex-rat-big-minus (exp #c(#x-ffffffff/efffffffe #x-effffffe/ffffffff))
  #c(0.5536378f0 -0.75409454f0))

;;; EXPT
(deftest expt-rational-fix-0 (expt 2 0) 1)
(deftest expt-rational-fix-1 (expt 2 1) 2)
(deftest expt-rational-fix-2 (expt 2 2) 4)
(deftest expt-rational-fix-8 (expt 2 8) 256)
(deftest expt-rational-fix-minus-8 (expt 2 -8) 1/256)
(deftest expt-rational-big-0 (expt #xffffffff 0) 1)
(deftest expt-rational-big-1 (expt #xffffffff 1) #xffffffff)
(deftest expt-rational-big-2 (expt #xffffffff 2) #xfffffffe00000001)
#+too-slow(deftest expt-rational-big-8 (expt #xffffffff 8)
  #xfffffff80000001bffffffc800000045ffffffc80000001bfffffff800000001)
#+too-slow(deftest expt-rational-big-minus-8 (expt #xffffffff -8)
  #x1/fffffff80000001bffffffc800000045ffffffc80000001bfffffff800000001)
(deftest expt-rational-rat-0 (expt 1/2 0) 1)
(deftest expt-rational-rat-1 (expt 1/2 1) 1/2)
(deftest expt-rational-rat-2 (expt 1/2 2) 1/4)
(deftest expt-rational-rat-8 (expt 1/2 8) 1/256)
(deftest expt-neg-rational-integer (expt -1/2 3) -1/8)
#-(and cmu (not eclipse))
(deftest expt-neg-complex-rational-integer (expt #c(0 -1/2) 3) #c(0 1/8))
(deftest expt-neg-float-integer (expt -0.5d0 3) -0.125d0)
(deftest expt-rational-rat-minus-8 (expt 1/2 -8) 256)
(deftest expt-rational-big-rat-0 (expt #x1/ffffffff 0) 1)
(deftest expt-rational-big-rat-1 (expt #x1/ffffffff 1) #x1/ffffffff)
(deftest expt-rational-big-rat-2 (expt #x1/ffffffff 2) #x1/fffffffe00000001)
#+too-slow(deftest expt-rational-big-rat-8 (expt #x1/ffffffff 8)
  #x1/fffffff80000001bffffffc800000045ffffffc80000001bfffffff800000001)
#+too-slow(deftest expt-rational-big-rat-minus-8 (expt #x1/ffffffff -8)
  #xfffffff80000001bffffffc800000045ffffffc80000001bfffffff800000001)
(deftest expt-rational-complex-fix-0 (expt #c(2 3) 0) 1)
(deftest expt-rational-complex-fix-1 (expt #c(2 3) 1) #c(2 3))
(deftest expt-rational-complex-fix-2 (expt #c(0 1) 2) -1)
(deftest expt-rational-complex-fix-3 (expt #c(2 2) 3) #c(-16 16))
(deftest expt-rational-complex-fix-4 (expt #c(2 2) 4) -64)
(deftest expt-rational-complex-fix-minus-4 (expt #c(2 2) -4) -1/64)
(deftest expt-rational-complex-big-0 (expt #c(#xffffffff 3) 0) 1)
(deftest expt-rational-complex-big-1 (expt #c(#xffffffff 3) 1) #c(#xffffffff 3))
(deftest expt-rational-complex-big-3 (expt #c(#xffffffff 2) 3)
  #c(79228162458924105333760589835 110680464390717702142))
(deftest expt-rational-complex-big-4 (expt #c(#xffffffff #xffffffff) 4)
  -1361129466416103254067990885930679402500)
(deftest expt-rational-complex-big-minus-4 (expt #c(#xffffffff #xffffffff) -4)
  -1/1361129466416103254067990885930679402500)

(deftest expt-rational-complex-rat-fix-0 (expt #c(1/2 2/3) 0) 1)
(deftest expt-rational-complex-rat-fix-1 (expt #c(1/2 2/3) 1) #c(1/2 2/3))
(deftest expt-rational-complex-rat-fix-2 (expt #c(0 1/2) 2) -1/4)
(deftest expt-rational-complex-rat-fix-3 (expt #c(1/2 2/3) 3) #c(-13/24 11/54))
(deftest expt-rational-complex-rat-fix-4 (expt #c(1/2 2/3) 4) #c(-527/1296 -7/27))
(deftest expt-rational-complex-rat-fix-minus-4 (expt #c(1/2 2/3) -4)
  #c(-682992/390625 435456/390625))
(deftest expt-rational-complex-rat-big-0 (expt #c(#x1/ffffffff 1/3) 0) 1)
(deftest expt-rational-complex-rat-big-1 (expt #c(#x1/ffffffff 1/3) 1)
  #c(#x1/ffffffff 1/3))
#-eclipse  ;Too slow!!!
(progn
  (deftest expt-rational-complex-rat-big-3 (expt #c(#x1/ffffffff 1/2) 3)
    #c(-55340232195358851071/316912649835696421541200789500
       -6148914688373205671/49191317506985645400))
  (deftest expt-rational-complex-rat-big-4 (expt #c(#x1/ffffffff #x1/ffffffff) 4)
    -4/340282366604025813516997721482669850625)
  (deftest expt-rational-complex-rat-big-minus-4 (expt #c(#x1/ffffffff #x1/ffffffff) -4)
    -340282366604025813516997721482669850625/4))
;; #-(and cmu (not eclipse))
(deftest expt-complex-negative
    (within-tolerance (expt -8 1/3)
		      #c(0.99999994f0 1.7320509f0))
  t)

(deftest expt-single-power-0 (expt 0.0f0 0) 1.0f0)
(deftest expt-single-power-9 (expt 9.0f0 0) 1.0f0)
(deftest expt-double-power-0 (expt 0.0d0 0) 1.0d0)
(deftest expt-double-power-9 (expt 9.0d0 0) 1.0d0)
(deftest expt-complex-single-power-0 (expt #c(0.0f0 0.0f0) 0) #c(1.0f0 0.0f0))
(deftest expt-complex-single-power-9 (expt #c(9.0f0 8.0f0) 0) #c(1.0f0 0.0f0))
(deftest expt-complex-double-power-0 (expt #c(0.0d0 0.0d0) 0) #c(1.0d0 0.0d0))
(deftest expt-double-single-power-0 (expt 9.0d0 0.0f0) 1.0d0)
(deftest expt-single-double-power-0 (expt 9.0f0 0.0d0) 1.0d0)
(deftest expt-complex-double-single-power-0 (expt #c(9.0d0 8.0d0) 0.0f0) #c(1.0d0 0.0d0))
(deftest expt-complex-single-double-power-0 (expt #c(9.0f0 8.0f0) 0.0d0) #c(1.0d0 0.0d0))
(deftest expt-complex-single-single-power-0 (expt #c(9.0f0 8.0f0) 0.0f0) #c(1.0f0 0.0f0))
(deftest expt-complex-rat-single-power-0 (expt #c(9 8) 0.0f0) #c(1.0f0 0.0f0))
(deftest expt-complex-rat-double-power-0 (expt #c(9 8) 0.0d0) #c(1.0d0 0.0d0))

(deftest expt-single-rat (float (expt 2.0f0 8) 1.0f0) 256.0f0)
(deftest expt-double-rat (float (expt 2.0d0 8) 1.0d0) 256.0d0)
(deftest expt-single-single (expt 2.0f0 8.0f0) 256.0f0)
(defun double-eps (&optional (factor 300))
  (if (find :hp *features*)
      (* factor double-float-epsilon)
      double-float-epsilon))
(deftest expt-double-double (within-tolerance (expt 2.0d0 8.0d0) 256.0d0
					      (double-eps)) t)
(deftest expt-single-double (within-tolerance (expt 2.0f0 8.0d0) 256.0d0
					      (double-eps)) t)
(deftest expt-double-single (within-tolerance (expt 2.0d0 8.0f0) 256.0d0
					      (double-eps)) t)

(deftest expt-complex-float-fixnum
  (within-tolerance (expt #c(1.0f0 2.0f0) 2) #c(-3.0f0 4.0f0)) t)
(deftest expt-complex-double-fixnum
  (within-tolerance (expt #c(1.0d0 2.0d0) 2) #c(-3.0d0 4.0d0)) t)
(deftest expt-fixnum-complex-float
  (within-tolerance (expt 2 #c(1.0f0 2.0f0))
		    #c(0.36691395f0 1.9660555f0))
  t)
(deftest expt-fixnum-complex-double
    (within-tolerance (expt 2 #c(2.0d0 2.0d0))
		      #c(7.338278867899595825d-01 3.932110979418975916d0))
  t)
(deftest expt-complex-float-complex-float
    (expt #c(2.0f0 2.0f0) #c(2.0f0 2.0f0))
  #c(-1.4525044f0 -0.8098898f0))
(deftest expt-complex-float-complex-double
    (within-tolerance
     (expt #c(2.0f0 2.0f0) #c(2.0d0 2.0d0))
     #c(-1.452504531835188128d0 -8.098895873521316791d-1))
  t)
(deftest expt-complex-double-complex-float
    (within-tolerance (expt #c(2.0d0 2.0d0) #c(2.0f0 2.0f0))
		      #c(-1.452504627055703d0 -0.809889546335300636d0))
  t)
(deftest expt-complex-double-complex-double
    (within-tolerance (expt #c(2.0d0 2.0d0) #c(2.0d0 2.0d0))
		      #c(-1.452504627055703d0 -0.809889546335300636d0))
  t)

;;; LOG
(deftest log-fix-1 (log 1) 0.0f0)
(deftest log-fix-2 (log 2) 0.6931472f0)
(deftest log-big (log #xffffffff) 22.18071f0)
(deftest log-rat-fix (log 1/2) -0.6931472f0)
(deftest log-rat-big (log #xffffffff/effffffe) 0.06453852f0)
(deftest log-single-1 (log 1.0f0) 0.0f0)
(deftest log-single-2 (log 2.0f0) 0.6931472f0)
(deftest log-double-1 (log 1.0d0) 0.0d0)
(deftest log-double-2 (log 2.0d0) 0.6931471805599453d0)
(deftest log-minus-fix-1 (log -1) #c(0.0f0 3.1415927f0))
(deftest log-minus-big (log #x-ffffffff) #c(22.18071f0 3.1415927f0))
(deftest log-minus-rat-fix (log -1/2) #c(-0.6931472f0 3.1415927f0))
(deftest log-minus-rat-big (log #x-ffffffff/effffffe) #c(0.06453852f0 3.1415927f0))
(deftest log-minus-single-1 (log -1.0f0) #c(0.0f0 3.1415927f0))
(deftest log-minus-double-1 (log -1.0d0) #c(0.0 3.141592653589793d0))
(deftest log-fix-fix (log #xffffffff 2) 32.0f0)
(deftest log-fix-double (log #xffffffff 2.0d0) 32.00000008793073d0)
(deftest log-fix-single10 (log 100 10.f0) 2.0f0)
(deftest log-complex-complex1 (log #c(0 1f0) #c(0 -1)) #c(-1.0f0 0.0f0))
(deftest log-complex-complex2
    (within-tolerance (log #c(-16 16.0d0) #c(2 2.0d0))
		      #c(3.0d0 2.6155673042153d-16))
  t)

;;; SQRT
(deftest sqrt-fixnum (sqrt 12) 3.4641016f0)
(deftest sqrt-single (sqrt 9.0f0) 3.0f0)
(deftest sqrt-double (sqrt 9.0d0) 3.0d0)
(deftest sqrt-minus-fixnum
    (within-tolerance (sqrt -12)
		      #c(-1.514206928732164670f-7 3.464101552963256836f0))
  t)    
(deftest sqrt-minus-single
    (within-tolerance (sqrt -9.0f0)
		      #c(-1.311341577547864290f-7 3.0f0))
  t)
(deftest sqrt-minus-double
   (within-tolerance (sqrt -9.0d0)
		     #c(0.0d0 3.0d0))
  t)
(deftest sqrt-minus-one
  (within-tolerance (sqrt -1) #c(-4.371139f-8 1.0f0)) t)
(deftest sqrt-complex (sqrt #c(0 2)) #c(0.99999994f0 0.99999994f0))
(deftest sqrt-big (= (sqrt 10000000000) 100000) t)
(deftest sqrt-real-big (= (sqrt 100000000000000000000) 10000000000) t)


;;; ISQRT
(deftest isqrt9 (isqrt 9) 3)
(deftest isqrt12 (isqrt 12) 3)
(deftest isqrt25 (isqrt 25) 5)
(deftest isqrt300 (isqrt 300) 17)
(deftest isqrt325 (isqrt 325) 18)
(deftest isqrt-big (isqrt #xffffffff) 65535)
(deftest isqrt-big2 (isqrt #x1ffffffff) 92681)
;;; broken!!!  The following is why:
;;; (ntrunx-uxint (integer-xint #x1ffffffffffffffff)
;;;               (integer-xint #x00016a0a0000)
;;;               (make-xint 5) (make-xint 3))
;;; returns #x16a0962c7 instead of #x16a09cccf
(deftest isqrt-big3 (isqrt #x1ffffffffffffffff) 6074000999)
(deftest isqrt-big4 (isqrt 10000000000) 100000)
(deftest isqrt-real-big (isqrt 100000000000000000000) 10000000000)

;;; 12.5.2 TRIGONOMETRIC AND RELATED FUNCTIONS
;;; ABS
(deftest abs-fix-0 (abs 0) 0)
(deftest abs-single-0 (abs 0.0f0) 0.0f0)
(deftest abs-double-0 (abs 0.0d0) 0.0d0)
(deftest abs-fix-pos (abs 1) 1)
(deftest abs-fix-neg (abs -1) 1)
(deftest abs-big-pos (abs #xffffffff) #xffffffff)
(deftest abs-big-neg (abs #x-ffffffff) #xffffffff)
(deftest abs-fix-rat-pos (abs 12/13) 12/13)
(deftest abs-fix-rat-neg (abs -12/13) 12/13)
(deftest abs-big-rat-pos (abs #xeffffffe/ffffffff) #xeffffffe/ffffffff)
(deftest abs-big-rat-neg (abs #x-effffffe/ffffffff) #xeffffffe/ffffffff)
(deftest abs-single-pos (abs 1.09f0) 1.09f0)
(deftest abs-single-neg (abs -1.09f0) 1.09f0)
(deftest abs-double-pos (abs 1.09d0) 1.09d0)
(deftest abs-double-neg (abs -1.09d0) 1.09d0)
(deftest abs-complex-fix (abs #c(3 4)) 5.0f0)
(deftest abs-complex-fix2 (abs #c(5 5)) 7.071068f0)
(deftest abs-complex-rat (abs #c(3/5 4/5)) 1.0f0)
(deftest abs-minus-complex-fix (abs #c(-5 5)) 7.071068f0)
(deftest abs-minus-complex-rat (abs #c(-3/5 4/5)) 1.0f0)
(deftest abs-minus-single-0 (eql (abs -0.0f0) -0.0f0) t)
(deftest abs-minus-double-0 (eql (abs -0.0d0) -0.0d0) t)
#-cmu
(deftest abs-complex-big
    (within-tolerance (abs #c(5.0d-200 5.0d-200))
		      7.071067811865479d-200)
  t)

;;; PHASE
(deftest phase-fixnum-zero (phase 0) 0.0f0)
(deftest phase-fixnum-pos (phase 1) 0.0f0)
(deftest phase-fixnum-neg (phase -1) 3.1415927f0)
(deftest phase-bignum-pos (phase #xffffffff) 0.0f0)
(deftest phase-bignum-neg (phase #x-ffffffff) 3.1415927f0)
(deftest phase-rat-fix-pos (phase 1/2) 0.0f0)
(deftest phase-rat-fix-neg (phase -1/2) 3.1415927f0)
(deftest phase-rat-bignum-pos (phase #x1/ffffffff) 0.0f0)
(deftest phase-rat-bignum-neg (phase #x-1/ffffffff) 3.1415927f0)
(deftest phase-single-zero (phase 0.0f0) 0.0f0)
(deftest phase-single-pos (phase 1.0f0) 0.0f0)
(deftest phase-single-neg (phase -1.0f0) 3.1415927f0)
(deftest phase-double-zero (phase 0.0d0) 0.0d0)
(deftest phase-double-pos (phase 1.0d0) 0.0d0)
(deftest phase-double-neg (phase -1.0d0) 3.141592653589793d0)
(deftest phase-complex-pos (phase #c(0 1)) 1.5707964f0)
(deftest phase-complex-neg (phase #c(0 -1)) -1.5707964f0)
(deftest phase-complex-double-pos (within-tolerance (phase #c(1.0d0 2.0d0))
						    1.1071487177940904d0) t)
(deftest phase-complex-double-neg (phase #c(-1.0d0 2.0d0)) 2.0344439357957027d0)

;;; SIGNUM
(deftest signum-fixnum-zero (signum 0) 0)
(deftest signum-fixnum-pos (signum 3) 1)
(deftest signum-fixnum-neg (signum -3) -1)
(deftest signum-bignum-pos (signum #xffffffff) 1)
(deftest signum-bignum-neg (signum #x-ffffffff) -1)
(deftest signum-rat-fix-pos (signum 1/2) 1)
(deftest signum-rat-fix-neg (signum -1/2) -1)
(deftest signum-rat-bignum-pos (signum #x1/ffffffff) 1)
(deftest signum-rat-bignum-neg (signum #x-1/ffffffff) -1)
(deftest signum-single-zero (signum 0.0f0) 0.0f0)
(deftest signum-single-pos (signum 3.0f0) 1.0f0)
(deftest signum-single-neg (signum -3.0f0) -1.0f0)
(deftest signum-double-zero (signum 0.0d0) 0.0d0)
(deftest signum-double-pos (signum 3.0d0) 1.0d0)
(deftest signum-double-neg (signum -3.0d0) -1.0d0)
(deftest signum-complex-pos (signum #c(0 3)) #c(0.0f0 1.0f0))
(deftest signum-complex-neg (signum #c(0 -3)) #c(0.0f0 -1.0f0))
(deftest signum-complex-double-pos
    (within-tolerance (signum #c(1.0d0 2.0d0))
		      #c(0.4472135954999579d0 0.8944271909999159d0))
  t)
(deftest signum-complex-double-neg
    (within-tolerance (signum #c(-1.0d0 2.0d0))
		      #c(-0.4472135954999579d0 0.8944271909999159d0))
  t)

;;; CIS
(deftest cis-fix (cis 0) #c(1.0f0 0.0f0))
(defparameter trig-big (expt 10 10))
(deftest cis-big (within-tolerance (cis trig-big) #C(0.87311983f0 -0.48750567f0)) t)
(deftest cis-rat (cis 1/2) #c(0.87758254f0 0.47942555f0))
(deftest cis-single (cis 1.0f0) #c(0.5403023f0 0.84147096f0))
(deftest cis-double (cis 0.0d0) #c(1.0d0 0.0d0))

;;; TRIG
(deftest sin0 (sin 0) 0.0f0)
(deftest cos-single1 (within-tolerance (cos  0.7853982f0) 0.707107f0) t)
(deftest tan-complex1 (within-tolerance (tan #c(0 1)) #C(0.0f0 0.761594f0)) t)
(deftest asin0 (asin 0) 0.0f0)
(deftest acos-complex1 (within-tolerance (acos #c(0 1))
					#C(1.5707963267948966f0 -0.8813735870195432f0)) t)
(deftest atan2 (within-tolerance (/ (atan 1 (sqrt 3)) 6) 0.087266) t)
(deftest atan1-complex (within-tolerance (atan #c(0 2))
					 #C(-1.5707964f0 0.54930615f0)) t)
(deftest sinh0 (sinh 0) 0.0f0)
(deftest cosh-complex1 (within-tolerance (cosh (complex 0 -1))
					#C(0.540302f0 -0.0f0)) t)

(macrolet ((def-trig (name op aop val)
	     `(deftest ,name (within-tolerance ,val (,aop (,op ,val))) t)))
  (def-trig sin-integer sin asin 1)
  (def-trig sin-ratio sin asin 1/2)
  (def-trig sin-single sin asin 0.707f0)
  (def-trig sin-double sin asin 0.707d0)
  (def-trig sin-complex sin asin #c(1.0d0 0.707d0))
  
  (def-trig cos-integer cos acos 1)
  (def-trig cos-ratio cos acos 1/2)
  (def-trig cos-single cos acos 0.707f0)
  (def-trig cos-double cos acos 0.707d0)
  (def-trig cos-complex cos acos #c(1.0d0 0.707d0))
  
  (def-trig tan-integer tan atan 1)
  (def-trig tan-ratio tan atan 1/2)
  (def-trig tan-single tan atan 0.707f0)
  (def-trig tan-double tan atan 0.707d0)
  (def-trig tan-complex tan atan #c(1.0d0 0.707d0))
  
  (def-trig sinh-integer sinh asinh 1)
  (def-trig sinh-ratio sinh asinh 1/2)
  (def-trig sinh-single sinh asinh 0.707f0)
  (def-trig sinh-double sinh asinh 0.707d0)
  (def-trig sinh-complex sinh asinh #c(1.0d0 0.707d0))
  
  (def-trig cosh-integer cosh acosh 1)
  (def-trig cosh-ratio cosh acosh 1/2)
  (def-trig cosh-single cosh acosh 0.707f0)
  (def-trig cosh-double cosh acosh 0.707d0)
  (def-trig cosh-complex cosh acosh #c(1.0d0 0.707d0))
  
  (def-trig tanh-integer tanh atanh 1)
  (def-trig tanh-ratio tanh atanh 1/2)
  (def-trig tanh-single tanh atanh 0.707f0)
  (def-trig tanh-double tanh atanh 0.707d0)
  (def-trig tanh-complex tanh atanh #c(1.0d0 0.707d0)))

(macrolet ((def-trig (name op aop val)
	     `(deftest ,name (within-tolerance (,aop (,op (float ,val 1.0d0)))
					       (,aop (,op ,val))) t)))
  (def-trig sin-big sin asin trig-big)
  (def-trig cos-big cos acos trig-big)
  (def-trig tan-big tan atan trig-big)
  #+broken 
  (def-trig sinh-big sinh asinh trig-big)
  #+broken 
  (def-trig cosh-big cosh acosh trig-big)
  #+broken 
  (def-trig tanh-big tanh atanh trig-big))
  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 12.6 TYPE CONVERSIONS AND COMPONENT EXTRACTIONS ON NUMBERS   ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; FLOAT
(deftest float-fix (float 9) 9.0f0)
(deftest float-big (float #xffffffff) 4294967295f0)
(deftest float-rat (float 1/2) 0.5f0)
(deftest float-rat-big (float #xeffffffe/ffffffff) 0.9375f0)
(deftest float-single (float 9.0f0) 9.0f0)
(deftest float-double (float 9.0d0) 9.0d0)

(deftest float-fix-single (float 9 2.0f0) 9.0f0)
(deftest float-big-single (float #xffffffff 2.0f0) 4294967295f0)
(deftest float-rat-single (float 1/2 2.0f0) 0.5f0)
(deftest float-rat-big-single (float #xeffffffe/ffffffff 2.0f0) 0.9375f0)
(deftest float-single-single (float 9.0f0 2.0f0) 9.0f0)
(deftest float-double-single (float 9.0d0 2.0f0) 9.0f0)

(deftest float-fix-double (float 9 2.0d0) 9.0d0)
(deftest float-big-double (float #xffffffff 2.0d0) 4294967295d0)
(deftest float-rat-double (float 1/2 2.0d0) 0.5d0)
(deftest float-rat-big-double (float #xeffffffe/ffffffff 2.0d0)
  0.9374999997526174d0)
(deftest float-single-double (float 9.0f0 2.0d0) 9.0d0)
(deftest float-double-double (float 9.0d0 2.0d0) 9.0d0)

;;; RATIONAL
(deftest rational-rat (rational 3/4) 3/4)
(deftest rational-zero (rational 0) 0)
(deftest rational-single
    (let* ((n 0.1f0)
	   (rat (rational n)))
      (and (rationalp rat)
	   (< (abs (- rat n)) single-float-epsilon))) t)
(deftest rational-double
    (let* ((n 0.1d0)
	   (rat (rational n)))
      (and (rationalp rat)
	   (< (abs (- rat n)) double-float-epsilon))) t)

;;; RATIONALIZE
(deftest rationalize-rat (rationalize 3/4) 3/4)
(deftest rationalize-zero (rationalize 0) 0)
(deftest rationalize-single (rationalize 0.1f0) 1/10)
(deftest rationalize-double (rationalize 0.1d0) 1/10)

;;; NUMERATOR
(deftest numerator-fix (numerator 3) 3)
(deftest numerator-big (numerator #xffffffff) #xffffffff)
(deftest numerator-fix-ratio (numerator 3/2) 3)
(deftest numerator-big-ratio (numerator #xffffffff/2) #xffffffff)

;;; DENOMINATOR
(deftest denominator-fix (denominator 3) 1)
(deftest denominator-big (denominator #xffffffff) 1)
(deftest denominator-fix-ratio (denominator 3/2) 2)
(deftest denominator-big-ratio (denominator #x2/ffffffff) #xffffffff)

;;; FFLOOR
(deftest ffloor-fix-pos (ffloor 2) 2.0f0 0)
(deftest ffloor-fix-neg (ffloor -2) -2.0f0 0)
(deftest ffloor-big-pos (ffloor #xffffffff) #.(float #xffffffff) 0)
(deftest ffloor-big-neg (ffloor #x-ffffffff) #.(float #x-ffffffff) 0)
(deftest ffloor-rat-down-pos (ffloor 4/3) 1.0f0 1/3)
(deftest ffloor-rat-up-pos (ffloor 5/3) 1.0f0 2/3)
(deftest ffloor-rat-down-neg (ffloor -4/3) -2.0f0 2/3)
(deftest ffloor-rat-up-neg (ffloor -5/3) -2.0f0 1/3)
(deftest ffloor-rat-big-down-pos
    (let ((n #x155555555/ffffffff))
      (multiple-value-bind (q r) (ffloor n)
	(and (= q 1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ffloor-rat-big-up-pos
    (let ((n #x1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (ffloor n)
	(and (= q 1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ffloor-rat-big-down-neg
    (let ((n #x-155555555/ffffffff))
      (multiple-value-bind (q r) (ffloor n)
	(and (= q -2.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ffloor-rat-big-up-neg
    (let ((n #x-1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (ffloor n)
	(and (= q -2.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ffloor-single-down-pos (ffloor 1.3f0)
    1.0f0 0.29999995f0)
(deftest ffloor-single-up-pos
  (multiple-value-bind (a b)
      (ffloor 1.7f0)
    (values (within-tolerance a 1.0f0)
	    (within-tolerance b 0.7f0)))
  t t)
(deftest ffloor-single-down-neg
  (multiple-value-bind (a b) (ffloor -1.3f0)
    (values (within-tolerance a -2.0f0)
	    (within-tolerance b 0.7f0)))
  t t)
(deftest ffloor-single-up-neg (ffloor -1.7f0)
    -2.0f0 0.29999995f0)
(deftest ffloor-double-down-pos (ffloor 1.3d0)
    1.0d0 0.30000000000000004d0)
(deftest ffloor-double-up-pos (ffloor 1.7d0)
    1.0d0 0.7d0)
(deftest ffloor-double-down-neg (ffloor -1.3d0)
    -2.0d0 0.7d0)
(deftest ffloor-double-up-neg (ffloor -1.7d0)
    -2.0d0 0.30000000000000004d0)

(deftest ffloor-fix-2 (ffloor 4 3) 1.0f0 1)
(deftest ffloor-single-2 (ffloor 4 3.0f0) 1.0f0 1.0f0)
(deftest ffloor-double-2 (ffloor 4 3.0d0) 1.0d0 1.0d0)

;;; FCEILING
(deftest fceiling-fix-pos (fceiling 2) 2.0f0 0)
(deftest fceiling-fix-neg (fceiling -2) -2.0f0 0)
(deftest fceiling-big-pos (fceiling #xffffffff) #.(float #xffffffff) 0)
(deftest fceiling-big-neg (fceiling #x-ffffffff) #.(float #x-ffffffff) 0)
(deftest fceiling-rat-down-pos (fceiling 4/3) 2.0f0 -2/3)
(deftest fceiling-rat-up-pos (fceiling 5/3) 2.0f0 -1/3)
(deftest fceiling-rat-down-neg (fceiling -4/3) -1.0f0 -1/3)
(deftest fceiling-rat-up-neg (fceiling -5/3) -1.0f0 -2/3)
(deftest fceiling-rat-big-down-pos
    (let ((n #x155555555/ffffffff))
      (multiple-value-bind (q r) (fceiling n)
	(and (= q 2.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fceiling-rat-big-up-pos
    (let ((n #x1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (fceiling n)
	(and (= q 2.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fceiling-rat-big-down-neg
    (let ((n #x-155555555/ffffffff))
      (multiple-value-bind (q r) (fceiling n)
	(and (= q -1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fceiling-rat-big-up-neg
    (let ((n #x-1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (fceiling n)
	(and (= q -1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fceiling-single-down-pos
  (multiple-value-bind (a b) (fceiling 1.3f0)
    (values (within-tolerance a 2.0f0)
	    (within-tolerance b -0.7f0)))
  t t)
(deftest fceiling-single-up-pos (fceiling 1.7f0)
    2.0f0 -0.29999995f0)
(deftest fceiling-single-down-neg (fceiling -1.3f0)
    -1.0f0 -0.29999995f0)
(deftest fceiling-single-up-neg
  (multiple-value-bind (a b) (fceiling -1.7f0)
    (values (within-tolerance a -1.0f0)
	    (within-tolerance b -0.7f0)))
  t t)
(deftest fceiling-double-down-pos (fceiling 1.3d0)
    2.0d0 -0.7d0)
(deftest fceiling-double-up-pos (fceiling 1.7d0)
    2.0d0 -0.30000000000000004d0)
(deftest fceiling-double-down-neg (fceiling -1.3d0)
    -1.0d0 -0.30000000000000004d0)
(deftest fceiling-double-up-neg (fceiling -1.7d0)
    -1.0d0 -0.7d0)

(deftest fceiling-fix-2 (fceiling 4 3) 2.0f0 -2)
(deftest fceiling-single-2 (fceiling 4 3.0f0) 2.0f0 -2.0f0)
(deftest fceiling-double-2 (fceiling 4 3.0d0) 2.0d0 -2.0d0)

;;; FTRUNCATE
(deftest ftruncate-fix-pos (ftruncate 2) 2.0f0 0)
(deftest ftruncate-big-pos (ftruncate #xffffffff) #.(float #xffffffff) 0)
(deftest ftruncate-rat-down-pos (ftruncate 4/3) 1.0f0 1/3)
(deftest ftruncate-rat-up-pos (ftruncate 5/3) 1.0f0 2/3)
(deftest ftruncate-rat-big-down-pos
    (let ((n #x155555555/ffffffff))
      (multiple-value-bind (q r) (ftruncate n)
	(and (= q 1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ftruncate-rat-big-up-pos
    (let ((n #x1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (ftruncate n)
	(and (= q 1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ftruncate-single-down-pos (ftruncate 1.3f0)
    1.0f0 0.29999995f0)
(deftest ftruncate-single-up-pos
  (multiple-value-bind (a b) (ftruncate 1.7f0)
    (values (within-tolerance a 1.0f0)
	    (within-tolerance b 0.7f0)))
  t t)
(deftest ftruncate-double-down-pos (ftruncate 1.3d0)
    1.0d0 0.30000000000000004d0)
(deftest ftruncate-double-up-pos (ftruncate 1.7d0)
    1.0d0 0.7d0)
(deftest ftruncate-fix-neg (ftruncate -2) -2.0f0 0)
(deftest ftruncate-big-neg (ftruncate #x-ffffffff) #.(float #x-ffffffff) 0)
(deftest ftruncate-rat-down-neg (ftruncate -4/3) -1.0f0 -1/3)
(deftest ftruncate-rat-up-neg (ftruncate -5/3) -1.0f0 -2/3)
(deftest ftruncate-rat-big-down-neg
    (let ((n #x-155555555/ffffffff))
      (multiple-value-bind (q r) (ftruncate n)
	(and (= q -1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ftruncate-rat-big-up-neg
    (let ((n #x-1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (ftruncate n)
	(and (= q -1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest ftruncate-single-down-neg (ftruncate -1.3f0)
    -1.0f0 -0.29999995f0)
(deftest ftruncate-single-up-neg
  (multiple-value-bind (a b) (ftruncate -1.7f0)
    (values (within-tolerance a -1.0f0)
	    (within-tolerance b -0.7f0)))
  t t)
(deftest ftruncate-double-down-neg (ftruncate -1.3d0)
    -1.0d0 -0.30000000000000004d0)
(deftest ftruncate-double-up-neg (ftruncate -1.7d0)
    -1.0d0 -0.7d0)

(deftest ftruncate-fix-2 (ftruncate 4 3) 1.0f0 1)
(deftest ftruncate-single-2 (ftruncate 4 3.0f0) 1.0f0 1.0f0)
(deftest ftruncate-double-2 (ftruncate 4 3.0d0) 1.0d0 1.0d0)

(defvar bigger-than-single (* 10 (ceiling most-positive-single-float))) 
(deftest ftruncate-bigs-2
  (ftruncate (* 2 bigger-than-single) bigger-than-single)
  2.0f0 0)
(defvar bigger-than-double (* 10 (ceiling most-positive-double-float)))
(deftest ftruncate-bigd-2
  (ftruncate (* 2 bigger-than-double) bigger-than-double)
  2.0f0 0)

;;; FROUND
(deftest fround-fix-pos (fround 2) 2.0f0 0)
(deftest fround-big-pos (fround #xffffffff) #.(float #xffffffff) 0)
(deftest fround-rat-down-pos (fround 4/3) 1.0f0 1/3)
(deftest fround-rat-up-pos (fround 5/3) 2.0f0 -1/3)
(deftest fround-rat-big-down-pos
    (let ((n #x155555555/ffffffff))
      (multiple-value-bind (q r) (fround n)
	(and (= q 1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fround-rat-big-up-pos
    (let ((n #x1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (fround n)
	(and (= q 2.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fround-single-down-pos (fround 1.3f0)
    1.0f0 0.29999995f0)
(deftest fround-single-up-pos (fround 1.7f0)
    2.0f0 -0.29999995f0)
(deftest fround-double-down-pos (fround 1.3d0)
    1.0d0 0.30000000000000004d0)
(deftest fround-double-up-pos (fround 1.7d0)
    2.0d0 -0.30000000000000004d0)
(deftest fround-fix-neg (fround -2) -2.0f0 0)
(deftest fround-big-neg (fround #x-ffffffff) #.(float #x-ffffffff) 0)
(deftest fround-rat-down-neg (fround -4/3) -1.0f0 -1/3)
(deftest fround-rat-up-neg (fround -5/3) -2.0f0 1/3)
(deftest fround-rat-big-down-neg
    (let ((n #x-155555555/ffffffff))
      (multiple-value-bind (q r) (fround n)
	(and (= q -1.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fround-rat-big-up-neg
    (let ((n #x-1aaaaaaaa/ffffffff))
      (multiple-value-bind (q r) (fround n)
	(and (= q -2.0f0)
	     (<= (abs (- n q r)) single-float-epsilon)))) t)
(deftest fround-single-down-neg (fround -1.3f0)
    -1.0f0 -0.29999995f0)
(deftest fround-single-up-neg (fround -1.7f0)
    -2.0f0 0.29999995f0)
(deftest fround-double-down-neg (fround -1.3d0)
    -1.0d0 -0.30000000000000004d0)
(deftest fround-double-up-neg (fround -1.7d0)
    -2.0d0 0.30000000000000004d0)

(deftest fround-rat-even-pos (fround 1/2) 0.0f0 1/2)
(deftest fround-rat-even-neg (fround -1/2) 0.0f0 -1/2)
(deftest fround-rat-odd-pos (fround 3/2) 2.0f0 -1/2)
(deftest fround-rat-odd-neg (fround -3/2) -2.0f0 1/2)
(deftest fround-single-even-pos (fround 0.5f0) 0.0f0 0.5f0)
(deftest fround-single-even-neg (fround -0.5f0) 0.0f0 -0.5f0)
(deftest fround-single-odd-pos (fround 1.5f0) 2.0f0 -0.5f0)
(deftest fround-single-odd-neg (fround -1.5f0) -2.0f0 0.5f0)
(deftest fround-double-even-pos (fround 0.5d0) 0.0d0 0.5d0)
(deftest fround-double-even-neg (fround -0.5d0) 0.0d0 -0.5d0)
(deftest fround-double-odd-pos (fround 1.5d0) 2.0d0 -0.5d0)
(deftest fround-double-odd-neg (fround -1.5d0) -2.0d0 0.5d0)

(deftest fround-fix-2 (fround 4 3) 1.0f0 1)
(deftest fround-single-2 (fround 4 3.0f0) 1.0f0 1.0f0)
(deftest fround-double-2 (fround 4 3.0d0) 1.0d0 1.0d0)

