;;; 12.5.2 TRIGONOMETRIC AND RELATED FUNCTIONS
(defmethod ABS ((x COMPLEX))
  (with-complex (r i x)
		(sqrt (add (mult r r) (mult i i)))))

(defmethod PHASE ((number COMPLEX))
  (atan (imagpart number) (realpart number)))
(defmethod PHASE ((number DOUBLE-FLOAT))
  (if (minusp number) pi 0.0d0))
(defmethod PHASE ((number REAL))
  (if (minusp number) single-pi 0.0f0))

(macrolet ((def-signum (type negative positive)
	     `(defmethod SIGNUM ((x ,type))
		(cond ((zerop x) x)
		      ((minusp x) ,negative)
		      (t ,positive)))))
  (def-signum INTEGER -1 1)
  (def-signum RATIO -1 1)
  (def-signum SINGLE-FLOAT -1.0f0 1.0f0)
  (def-signum DOUBLE-FLOAT -1.0d0 1.0d0))
(defmethod SIGNUM ((x COMPLEX))
  (if (zerop x) x (/ x (abs x))))
  
(defun CIS (radians) (complex (cos radians) (sin radians)))

(macrolet ((def-trig (name)
	     `(progn
		(defmethod-math1 ,name (INTEGER))
		(defmethod-math1 ,name (RATIO))
		(defmethod-math1 ,name (SINGLE-FLOAT))
		(defmethod-math1 ,name (DOUBLE-FLOAT))
		(defmethod ,name ((x COMPLEX))
		  (,(make-name "~a-COMPLEX" name) x)))))
  (def-trig SIN)
  (def-trig COS)
  (def-trig TAN)
  (def-trig SINH)
  (def-trig COSH)
  (def-trig TANH)
  (def-trig atan1)
  (def-trig ASINH))


(macrolet ((def-trig1 (name type)
	     `(defmethod ,name ((x ,type))
		(if (<= -1 x 1)
		    (,(make-name "~a1-~a" name type) x)
		    (,(make-name "~a-COMPLEX" name) x))))
	   (def-trig (name)
	     `(progn
		(def-trig1 ,name INTEGER)
		(def-trig1 ,name RATIO)
		(def-trig1 ,name SINGLE-FLOAT)
		(def-trig1 ,name DOUBLE-FLOAT)
		(defmethod ,name ((x COMPLEX))
		  (,(make-name "~a-COMPLEX" name) x)))))
  (def-trig ASIN)
  (def-trig ACOS)
  (def-trig ATANH))

(macrolet ((def-trig1 (name type)
	     `(defmethod ,name ((x ,type))
		(if (>= x 1)
		    (,(make-name "~a1-~a" name type) x)
		    (,(make-name "~a-COMPLEX" name) x))))
	   (def-trig (name)
	     `(progn
		(def-trig1 ,name INTEGER)
		(def-trig1 ,name RATIO)
		(def-trig1 ,name SINGLE-FLOAT)
		(def-trig1 ,name DOUBLE-FLOAT)
		(defmethod ,name ((x COMPLEX))
		  (,(make-name "~a-COMPLEX" name) x)))))
  (def-trig ACOSH))


(defmethod-math2 atan2 (SINGLE-FLOAT SINGLE-FLOAT))
(defmethod-math2 atan2 (DOUBLE-FLOAT DOUBLE-FLOAT))
(defmethod-math2 atan2 (INTEGER INTEGER))
(defmethod-math2 atan2 (RATIO RATIO))
(defmethod-math2 atan2 (SINGLE-FLOAT DOUBLE-FLOAT))
(defmethod-math2 atan2 (SINGLE-FLOAT RATIO))
(defmethod-math2 atan2 (SINGLE-FLOAT INTEGER))
(defmethod-math2 atan2 (DOUBLE-FLOAT SINGLE-FLOAT))
(defmethod-math2 atan2 (DOUBLE-FLOAT RATIO))
(defmethod-math2 atan2 (DOUBLE-FLOAT INTEGER))
(defmethod-math2 atan2 (RATIO SINGLE-FLOAT))
(defmethod-math2 atan2 (RATIO DOUBLE-FLOAT))
(defmethod-math2 atan2 (RATIO INTEGER))
(defmethod-math2 atan2 (INTEGER RATIO))
(defmethod-math2 atan2 (INTEGER SINGLE-FLOAT))
(defmethod-math2 atan2 (INTEGER DOUBLE-FLOAT))

(defun ATAN (y &optional (x nil xp))
  (if xp (atan2 y x) (atan1 y)))

#+not-yet
(define-compiler-macro atan (y &optional (x nil xp))
  (if xp `(atan2 ,y ,x) `(atan1 ,y)))
      
(defun sin-complex (z)
  (with-complex (r i z real)
    (complex (* (sin r) (cosh i)) (* (cos r) (sinh i)))))
(defun cos-complex (z)
  (with-complex (r i z real)
    (complex (* (cos r) (cosh i)) (- (* (sin r) (sinh i))))))
(defun tan-complex (z) (/ (sin z) (cos z)))
(defun i* (z) (complex (imagpart z) (- (realpart z))))
(defun zroot (z) (sqrt (- 1 (* z z))))
(defun asin-complex (z) (- (i* (log (+ (i* z) (zroot z))))))
(defun acos-complex (z) (- (i* (log (+ z (i* (zroot z)))))))
(defun atan1-complex (z)
  (with-complex (r i z real)
    (/ (- (log (complex (- 1 i) r))
	  (log (complex (+ 1 i) (- r))))
       #c(0 2))))
(defun sinh-complex (z) (/ (- (exp z) (exp (- z))) 2))
(defun cosh-complex (z) (/ (+ (exp z) (exp (- z))) 2))
(defun tanh-complex (z) (let ((e (exp z))
			      (e-minus (exp (- z))))
			  (/ (- e e-minus)
			     (+ e e-minus))))

(defun asinh-complex (z) (log (+ z (sqrt (1+ (* z z))))))
(defun acosh-complex (z)
  (* 2 (log (+ (sqrt (/ (1+ z) 2))
	       (sqrt (/ (1- z) 2))))))
(defun atanh-complex (z) (/ (- (log (+ 1 z))
			       (log (- 1 z)))
			    2))

