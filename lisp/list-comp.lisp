
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 15.2 LISTS                                                   ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsetf eclipse:CAR (exp) (val)
  `(progn (rplaca ,exp ,val) ,val))
(defsetf eclipse:CDR (exp) (val)
  `(progn (rplacd ,exp ,val) ,val))
(defsetf eclipse:CAAR (exp) (val)
  `(progn (rplaca (eclipse:car ,exp) ,val) ,val))
(defsetf eclipse:CADR (exp) (val)
  `(progn (rplaca (eclipse:cdr ,exp) ,val) ,val))
(defsetf eclipse:CAAAR (exp) (val)
  `(progn (rplaca (eclipse:caar ,exp) ,val) ,val))
(defsetf eclipse:CAADR (exp) (val)
  `(progn (rplaca (eclipse:cadr ,exp) ,val) ,val))
(defsetf eclipse:CADAR (exp) (val)
  `(progn (rplaca (eclipse:cdar ,exp) ,val) ,val))
(defsetf eclipse:CADDR (exp) (val)
  `(progn (rplaca (eclipse:cddr ,exp) ,val) ,val))
(defsetf eclipse:CAAAAR (exp) (val)
  `(progn (rplaca (eclipse:caaar ,exp) ,val) ,val))
(defsetf eclipse:CAAADR (exp) (val)
  `(progn (rplaca (eclipse:caadr ,exp) ,val) ,val))
(defsetf eclipse:CAADAR (exp) (val)
  `(progn (rplaca (eclipse:cadar ,exp) ,val) ,val))
(defsetf eclipse:CAADDR (exp) (val)
  `(progn (rplaca (eclipse:caddr ,exp) ,val) ,val))
(defsetf eclipse:CADAAR (exp) (val)
  `(progn (rplaca (eclipse:cdaar ,exp) ,val) ,val))
(defsetf eclipse:CADADR (exp) (val)
  `(progn (rplaca (eclipse:cdadr ,exp) ,val) ,val))
(defsetf eclipse:CADDAR (exp) (val)
  `(progn (rplaca (eclipse:cddar ,exp) ,val) ,val))
(defsetf eclipse:CADDDR (exp) (val)
  `(progn (rplaca (eclipse:cdddr ,exp) ,val) ,val))

(defsetf eclipse:CDAR (exp) (val)
  `(progn (rplacd (eclipse:car ,exp) ,val) ,val))
(defsetf eclipse:CDDR (exp) (val)
  `(progn (rplacd (eclipse:cdr ,exp) ,val) ,val))
(defsetf eclipse:CDAAR (exp) (val)
  `(progn (rplacd (eclipse:caar ,exp) ,val) ,val))
(defsetf eclipse:CDADR (exp) (val)
  `(progn (rplacd (eclipse:cadr ,exp) ,val) ,val))
(defsetf eclipse:CDDAR (exp) (val)
  `(progn (rplacd (eclipse:cdar ,exp) ,val) ,val))
(defsetf eclipse:CDDDR (exp) (val)
  `(progn (rplacd (eclipse:cddr ,exp) ,val) ,val))
(defsetf eclipse:CDAAAR (exp) (val)
  `(progn (rplacd (eclipse:caaar ,exp) ,val) ,val))
(defsetf eclipse:CDAADR (exp) (val)
  `(progn (rplacd (eclipse:caadr ,exp) ,val) ,val))
(defsetf eclipse:CDADAR (exp) (val)
  `(progn (rplacd (eclipse:cadar ,exp) ,val) ,val))
(defsetf eclipse:CDADDR (exp) (val)
  `(progn (rplacd (eclipse:caddr ,exp) ,val) ,val))
(defsetf eclipse:CDDAAR (exp) (val)
  `(progn (rplacd (eclipse:cdaar ,exp) ,val) ,val))
(defsetf eclipse:CDDADR (exp) (val)
  `(progn (rplacd (eclipse:cdadr ,exp) ,val) ,val))
(defsetf eclipse:CDDDAR (exp) (val)
  `(progn (rplacd (eclipse:cddar ,exp) ,val) ,val))
(defsetf eclipse:CDDDDR (exp) (val)
  `(progn (rplacd (eclipse:cdddr ,exp) ,val) ,val))

(defsetf eclipse:NTH (n list) (val)
  `(progn (rplaca (eclipse:nthcdr ,n ,list) ,val) ,val))
(defsetf eclipse:FIRST (list) (val)
  `(progn (rplaca ,list ,val) ,val))
(defsetf eclipse:SECOND (list) (val)
  `(progn (rplaca (eclipse:nthcdr 1 ,list) ,val) ,val))
(defsetf eclipse:THIRD (list) (val)
  `(progn (rplaca (eclipse:nthcdr 2 ,list) ,val) ,val))
(defsetf eclipse:FOURTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 3 ,list) ,val) ,val))
(defsetf eclipse:FIFTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 4 ,list) ,val) ,val))
(defsetf eclipse:SIXTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 5 ,list) ,val) ,val))
(defsetf eclipse:SEVENTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 6 ,list) ,val) ,val))
(defsetf eclipse:EIGHTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 7 ,list) ,val) ,val))
(defsetf eclipse:NINTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 8 ,list) ,val) ,val))
(defsetf eclipse:TENTH (list) (val)
  `(progn (rplaca (eclipse:nthcdr 9 ,list) ,val) ,val))
(defsetf eclipse:REST (list) (val)
  `(progn (rplacd ,list ,val) ,val))

(defmacro eclipse:PUSH (&environment env item place)
  (eclipse::modify-body place env `(cons ,item ,place)))

(defmacro eclipse:PUSHNEW (&environment env item place &rest rest)
  (eclipse::modify-body place env `(eclipse:adjoin ,item ,place ,@rest)))

;;; An extension of MODIFY-BODY in control-compile.lisp
(defmacro eclipse:POP (&environment env place)
  (when (symbolp place)
    (return-from eclipse:pop
      (let ((temp (gensym "TOP")))
	`(let ((,temp (car ,place)))
	   (setq ,place (cdr ,place))
	   ,temp))))
  (multiple-value-bind (vars vals stores store-form access-form)
      (eclipse:get-setf-expansion place env)
    (let ((extra (gensym)))
      (if (cdr stores)
	  (let ((first (first stores)))
	    `(let* ,(eclipse::make-binding-list vars vals)
	       (eclipse:multiple-value-bind ,stores ,access-form
		 (let ((,extra (car ,first)))
		   (setq ,first (cdr ,first))
		   ,store-form ,extra))))
	  `(let* ,(eclipse::make-binding-list
		   `(,@vars ,extra ,@stores)
		   `(,@vals ,access-form (cdr ,extra)))
	     ,store-form
	     (car ,extra))))))
