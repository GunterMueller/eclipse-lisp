(in-package :host)

(defun eclipse::generate-all-statics ()
  (eclipse::generate-symbol-names)
  (eclipse::generate-static-classes)
  (eclipse::generate-pkg)
  (eclipse::generate-statics :ext)
  (eclipse::generate-statics :int)
  (add-more)
  (eclipse::generate-statics :add))
  
  
;;; There is no guarantee that do-symbols iterates over each symbol once, so we must hash.
(defvar *eclipse-symbols* (make-hash-table :test 'eq))
(defvar *eclipse-external-symbols* (make-hash-table :test 'eq))
(defvar *cl-external-symbols* (make-hash-table :test 'eq))
(defvar *more-symbols* (make-hash-table :test 'eq))
(defvar *test-symbols* (make-hash-table :test 'eq))

(defun enter-symbol (symbol s table)
  (eclipse::common-symbol s symbol)
  (setf (gethash symbol table)
	(string (eclipse:get-output-stream-string s))))

(defun unenteredp (symbol)
  (and (not (gethash symbol *eclipse-external-symbols*))
       (not (gethash symbol *eclipse-symbols*))))

(defun eclipse::generate-symbol-names (&optional (clearp t) &aux (i 0))
  (when clearp
    (clrhash *eclipse-symbols*)
    (clrhash *eclipse-external-symbols*))
  (eclipse:with-output-to-string (s)
   (labels
       ((enter-tree (tree)
		    (typecase tree
		      (symbol (when (unenteredp tree)
				(let* ((name (symbol-name tree))
				       (sym (or (find-symbol name :eclipse)
						(find-symbol name :host)))
				       (unenteredp (unenteredp sym)))
				  (when unenteredp 
				    (enter-symbol sym s *eclipse-symbols*)))))
		      (cons (when (consp (cdr tree)) (mapc #'enter-tree tree)))))
	(enter-extras (plist symbol)
		      (enter-tree plist)
		      (let ((gf (when (eclipse:fboundp symbol) (eclipse:fdefinition symbol))))
			(when (eclipse:typep gf 'eclipse:generic-function)
			  (enter-tree (eclipse:generic-function-lambda-list gf))
			  (loop for method in (eclipse:generic-function-methods gf)
				do (enter-tree (eclipse:method-lambda-list method)))))
		      (let ((class (eclipse:find-class symbol nil)))
			(when class
			  (loop for slot in (eclipse:class-direct-slots class)
				do (enter-tree (eclipse:slot-definition-name slot))))))
	(report ()
		(when (zerop (mod (incf i) 100))
		  (write-char #\space t) (princ i t) (force-output t))))
    (do-external-symbols (symbol :eclipse)
      (report)
      (enter-symbol symbol s *eclipse-external-symbols*))
    (setq i 0)
    (do-external-symbols (symbol :eclipse)
      (report)
      (enter-extras (symbol-plist symbol) symbol))
    (setq i 0)
    (do-symbols (symbol :eclipse)
      (report)
      (when (and #+cmu			;bad bug in do-symbols
		 (eq symbol (find-symbol (symbol-name symbol) :eclipse))
		 (unenteredp symbol)) 
	(let ((plist (symbol-plist symbol)))
	  (cond ((getf (getf plist 'eclipse::global-variable)
		       'eclipse::c-external)
		 nil)
		(plist
		 (enter-symbol symbol s *eclipse-symbols*)
		 (enter-extras plist symbol))
		((or (boundp symbol)
		     (fboundp symbol))
		 (enter-symbol symbol s *eclipse-symbols*))))))))
  t)
	       

(defun generate-initializer (initializer_name stream)
  (let ((i 0))
    #'(lambda (symbol ename)
	(when symbol
	  (let ((name (symbol-name symbol)))
	    (when (zerop (mod (incf i) 100))
	      (write-char #\space t) (princ i t) (force-output t))
	    (format stream "~a(cl~a, ~d, ~s);~%"
		    initializer_name
		    ename
		    (length name)
		    name))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun eclipse::generate-static-classes (&optional (file "c/static-class.c"))
  (with-open-file (f file :direction :output)
    (format f "#define cl_ECLIPSE_STATIC_DEFINITIONS	1~%")
    (format f "#include \"eclipse.h\"~%#include \"statics.h\"~2%")
    (loop for s in *root-class-list*
	  and i from 1
	  do (format f "clStaticStandardInstance(cl~a,~d);~%"
		     (substitute #\_ #\- (symbol-name s))
		     i))
    (format f "~%void clInitStaticClasses()~%{~%")
    (loop for s in *root-class-list*
	  do (format f "  clClassInit(cl~a);~%"
		     (substitute #\_ #\- (symbol-name s))))
    (format f "~%  clFlagInit(clFLAG0, 0);~%  clFlagInit(clFLAG1, -1);~%}~%"))
  file)
    
    
					    
(defun eclipse::generate-statics (&optional (group :add)
					    (file (case group
						    (:ext "c/statics-ext.c")
						    (:int "c/statics-int.c")
						    (:add "c/statics-add.c")
						    (:test "c/statics-test.c")))
					    (table (case group
						     (:ext *eclipse-external-symbols*)
						     (:int *eclipse-symbols*)
						     (:add *more-symbols*)
						     (:test *test-symbols*)))
					    &aux (externalp (eq group :ext)))
  (with-open-file (f (merge-pathnames file) :direction :output)
    (format f "#include \"eclipse.h\"~%#include \"statics.h\"~2%")
    (format f "#define ThisTable clECLIPSE_~:[INTERN~;EXTERN~]~%" externalp)
    (format f "clExternDef(clSIMPLE_BASE_STRING);~%clExternDef(clSYMBOL);~2%")
    (if externalp
	(format f "clStaticSymbol(clNIL, 3, \"NIL\");~2%")
	(format f "extern clSymbolCell clStaticVar(clNIL);~2%"))

    (maphash (generate-initializer "clStaticSymbol" f) table)

    (format f "~%void ~a()~%{~%"
	    (case group
	      (:ext "clInitSymbolsExt")
	      (:int "clInitSymbolsInt")
	      (:add "clInitSymbolsAdd")
	      (:test "clInitSymbolsTest")))
    (when externalp
      (format f "~%  clSymbolInit(clNIL, 3, \"NIL\");~2%"))
    (maphash (generate-initializer "  clSymbolInit" f) table)
    (write-line "}" f))
  file)

(defun eclipse::generate-pkg (&optional (file "c/pkg.c"))
  (with-open-file (f (merge-pathnames file) :direction :output)
    (format f "#include \"eclipse.h\"~2%")
    (format f "extern clObject clCharpSimpleBaseString(clProto), clList(clProto),
  clMakeKeyword(clProto), clMakePackage(clProto), clPackageExternals(clProto),
  clOpenAddressStringSethash(clProto);~2%")
    (format f "extern clObject ")	
    (let ((count 1))
      (eclipse:with-output-to-string (s)
	(dolist (sym user::*cl-symbols*)
	  (when sym
	    (when (zerop (mod count 3)) (format f "~%  ")) (incf count)
	    (format f "cl~a, " (setf (gethash sym *cl-external-symbols*)
				     (progn (eclipse::common-symbol
					     s (find-symbol (symbol-name sym) :eclipse))
					    (string (eclipse:get-output-stream-string s)))))))))
    (format f " clINTERNAL_SIZE, clEXTERNAL_SIZE;~2%")
    (format f "void clInitPkg() ~%{~%")
    (format f "  clObject pkg, externs;")
    (format f "
  clSetq(pkg, clMakePackage(clCharpSimpleBaseString(\"COMMON-LISP\"),
                            clMakeKeyword(clCharpSimpleBaseString(\"NICKNAMES\"), clEOA),
                            clList(clCharpSimpleBaseString(\"LISP\"),
                                   clCharpSimpleBaseString(\"CL\"), clEOA),
                            clMakeKeyword(clCharpSimpleBaseString(\"USE\"), clEOA),
			    clCharpSimpleBaseString(\"ECLIPSE\"),
                            clINTERNAL_SIZE, clIntFixnum(1),
                            clEXTERNAL_SIZE, clIntIndex(1877),
                            clEOA));~%")
    (format f "  clSetq(externs, clPackageExternals(pkg, clEOA));~%")
    (dolist (sym user::*cl-symbols*)
      (let ((id (gethash sym *cl-external-symbols*)))
	(format f "  clOpenAddressStringSethash(_clSymbolName(cl~a), externs, cl~a);~%"
		id id)))
    (format f "}~%")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun add-more (&optional (clearp t))
  (when clearp (clrhash *more-symbols*))
  (eclipse:with-output-to-string (s)
    (macrolet ((add (x)
		  `(progn (eclipse::common-symbol s ',x)
			  (setf (gethash ',x *more-symbols*)
				(string (eclipse:get-output-stream-string s))))))
      (add C-EXTERNAL )
      (add COMPILER_LET )
      (add RETRY )
      (add COLLECTION )
      (add HEAP-START )
      (add NONE )
      (add SYMBOL-MACRO )
      (add ?)
      (add significand)
      (add exponent)
      (add sign)
      (add volatile)
  (add resource-p)
  (add copy-resource)
  (add illegal-instruction)
  (add single-value)
  (add empty1 )
  (add empty2 )
  (add new-name )
  (add deinitializer )
  (add initializer )
  (add around )
  (add from-alist )
  (add illegal-array-axis-number )
  (add sub1 )
  (add sub2 )
  (add sub )
  (add next-method )
  (add pool )
  (add other-data )
  (add d )
  (add global-setf-function )
  (add index1 )
  (add parameters )
  (add matcher )
  (add index2 )
  (add after )
  (add new-elt )
  (add m )
  (add before )
  (add constructor )
  (add cnm-args )
  (add sealed-object-error )
  (add in-use )
  (add +s )
  (add arg )
  (add structure-size )
  (add hash-values )
  (add maximize )
  (add finally )
  (add loop-hashtab- )
  (add loop-sum- )
  (add next-loop )
  (add nesting )
  (add local )
  (add help )
  (add present-symbols )
  (add collecting )
  (add slot-option )
  (add temps )
  (add env-hook )
  (add begin-parse )
  (add rehash-size )
  (add w )
  (add strings )
  (add use-new-symbols )
  (add frame- )
  (add status )
  (add make-specializer-forms )
  (add form )
  (add subforms )
  (add define-label )
  (add call )
  (add address )
  (add mask )
  (add inner )
  (add comma )
  (add appending )
  (add enclosed )
  (add assign )
  (add compound )
  (add computed-file-sequence-length )
  (add const-a )
  (add until )
  (add loop-hash-val-temp- )
  (add loop-repeat- )
  (add setter )
  (add charp- )
  (add values1 )
  (add logical-block )
  (add while )
  (add collect )
  (add hash-value )
  (add using )
  (add maxmin )
  (add add-mop-option )
  (add restore-values )
  (add supplies-values )
  (add const-c )
  (add run-start )
  (add segments )
  (add bq-clobberable )
  (add downfrom )
  (add minimize )
  (add counting )
  (add loop-it- )
  (add parse-method-combination )
  (add method-group-spec-order )
  (add *specialized-names* )
  (add tagbody-end )
  (add end-catch )
  (add vals )
  (add progv-start )
  (add start-col )
  (add loop-limit- )
  (add loop-list-head- )
  (add canonicalize-mop-options )
  (add mop-option )
  (add unwind-return )
  (add minpad )
  (add nconcing )
  (add int-float )
  (add tagbody-start )
  (add system-error )
  (add displaced-to )
  (add padchar )
  (add eof )
  (add symbols )
  (add upto )
  (add from )
  (add loop-seq-limit- )
  (add loop-maxmin-flag- )
  (add def-interpreter )
  (add lexical-env )
  (add indentation )
  (add class-type )
  (add across )
  (add thereis )
  (add accumulated-slot-option )
  (add method-group-spec-description )
  (add canonicalize-default-initargs )
  (add global-compiler-macro-function )
  (add double-cfloat )
  (add hook )
  (add lisp-function )
  (add unwind )
  (add doing )
  (add n-buckets )
  (add rehash-threshold )
  (add init )
  (add as )
  (add never )
  (add loop-destructure- )
  (add loop-ignore- )
  (add symbol-type )
  (add generate-method-form )
  (add canonicalize-mop-slot-specifications )
  (add standard-option )
  (add form-information )
  (add file-stream-pathname )
  (add colinc )
  (add bq-quote )
  (add hash-keys )
  (add initially )
  (add loop-list- )
  (add loop-fn- )
  (add desetq )
  (add int-double )
  (add int- )
  (add float- )
  (add entry- )
  (add package- )
  (add resource- )
  (add long- )
  (add control )
  (add multiple-value-funcall )
  (add cons-with-car )
  (add of-type )
  (add parse-short-method-combination )
  (add method-group-spec-required )
  (add generate-setf-method )
  (add displaced-index-offset )
  (add external-symbols )
  (add to )
  (add loop-across-index- )
  (add singleton-option )
  (add dotted-list )
  (add make-binding )
  (add returned )
  (add block-end )
  (add accumulation )
  (add real-start )
  (add bq-list )
  (add upfrom )
  (add loop-maxmin- )
  (add float-double )
  (add label )
  (add cleanup-end )
  (add accumulate-values )
  (add goto )
  (add limit )
  (add fn )
  (add top )
  (add body )
  (add parse-method-group-specifiers )
  (add double-int )
  (add cleanup-start )
  (add bus-error )
  (add loop-across-limit- )
  (add loop-bind- )
  (add internal-size )
  (add controls )
  (add reference )
  (add thrown )
  (add end-parse )
  (add bq-cons )
  (add logical-host )
  (add minimizing )
  (add choose-each )
  (add not-first-p )
  (add parse-group-qualifier )
  (add need-newline )
  (add comma-dot )
  (add string-char )
  (add loop-hash-key-temp- )
  (add standard-slot-option )
  (add *specializer-names* )
  (add setf-compiler-macro )
  (add internal )
  (add double- )
  (add mvc )
  (add file )
  (add state )
  (add present-symbol )
  (add with )
  (add end-loop )
  (add store-temps )
  (add lambda-vars )
  (add saved-value )
  (add progv-end )
  (add l )
  (add below )
  (add loop-pkgsym-next- )
  (add sum )
  (add loopvar- )
  (add external-size )
  (add with-old-values )
  (add save-values )
  (add initialize )
  (add force-newlines? )
  (add comma-interval )
  (add mincol )
  (add being )
  (add in )
  (add condition-type )
  (add +l )
  (add macro-args )
  (add returned-value )
  (add mvp1 )
  (add exception )
  (add continue-processing )
  (add exit-throw )
  (add all )
  (add source )
  (add val )
  (add bq-nconc )
  (add loop-step-by- )
  (add type-abbreviation )
  (add loop-pkgsym- )
  (add use-current-symbols )
  (add for )
  (add make-simple-bit-vector )
  (add bad-device )
  (add rand-seed )
  (add bq-list* )
  (add bq-append )
  (add always )
  (add maximizing )
  (add loop-maxmin-temp- )
  (add hash-key )
  (add captured-index )
  (add +p )
  (add canonicalize-mop-slot-specification )
  (add find-catcher )
  (add call-eliminable )
  (add dbind )
  (add segmentation-violation )
  (add line-limit-abbreviation-exit )
  (add comma-atsign )
  (add external-symbol )
  (add loop-hashtab-next- )
  (add specify-name )
  (add add-slot-option )
  (add order )
  (add dirty )
  (add interrupt )
  (add loop-across-vector- )
  (add loop-list-tail- )
  (add into )
  (add it )
  (add place )
  (add local-return )
  (add commachar )
  (add summing )
  (add unwind-values  )
  (add on )
  (add temp )
  (add c)
  (add i)

  (add COPY-COMPILETIME-BINDING)
  (add RUNTIME-BINDING-STATUS)
  (add USED)
  (add MAKE-USED)
  (add MAKE-RUNTIME-BINDING)
  (add MAKE-COMPILETIME-BINDING)
  (add RUNTIME-BINDING-DECLARATIONS)
  (add GENERATE-PSET)
  (add RUNTIME-BINDING-NAME)
  (add COMPILETIME-BINDING-P)
  (add COMPILETIME-BINDING-VALUE)
  (add RUNTIME-BINDING-P)
  (add COMPILETIME-BINDING-NAME)
  (add WARN-UNUSED)
  (add COMPILETIME-BINDING-STATUS)
  (add WARN-USED)
  (add COMPILETIME-BINDING-DECLARATIONS)
  (add RUNTIME-BINDING-VALUE)
  (add COMPILETIME-BINDING)
  (add INITILIZE-STREAM-VARIABLES)
  (add RUNTIME-BINDING)
  (add COPY-RUNTIME-BINDING)
)))


#+nn
(eclipse:with-output-to-string (s)
  (macrolet ((add (x)
		  `(progn (eclipse::common-symbol s ',x)
			  (setf (gethash ',x *test-symbols*)
				(string (eclipse:get-output-stream-string s))))))
      (add tst-lambda-list-keywords )
  (add allow-other-keys-lambda-key1 )
  (add tst-aux2 )
  (add tst-flet-mixed-args-key-second )
  (add flet-key-key-as-required-value )
  (add *an-unbound-variable* )
  (add tst-defun-redefine )
  (add flet-allow-other-keys-key2 )
  (add allow-other-keys-lambda-key2 )
  (add tst-empty-key )
  (add tst-flet-aux1 )
  (add key-both )
  (add items )
  (add tst-flet-aux2 )
  (add aux1 )
  (add mixed-args-key-first )
  (add flet-key-both )
  (add tst-key-second )
  (add tst-required )
  (add tst-eval-lexical )
  (add eval-special )
  (add wager )
  (add tst-eval-when-definately-not-top )
  (add tst-flet-empty-key )
  (add tst-allow-other-keys-key2 )
  (add aux2 )
  (add mixed-args-as-req-and-opt )
  (add tst-mixed-args-two )
  (add tst-key-none )
  (add tst-flet-required )
  (add supplied-and-rest-all )
  (add lex-counter )
  (add fun-with-block )
  (add defun-redefine )
  (add empty-key )
  (add flet-aux1 )
  (add tst-flet-key-none )
  (add flet-supplied-and-rest-two )
  (add tst-self-eval-number )
  (add get-var )
  (add flet-allow-other-keys-key2-reversed )
  (add tst-flet-allow-other-keys-key2-reversed )
  (add tst-allow-other-keys-key2-reversed )
  (add tst-flet-aux-default )
  (add flet-aux2 )
  (add tst-symbol-keywords )
  (add key-key-as-key-value )
  (add flet-allow-other-keys-lambda-key0 )
  (add tst-flet-allow-other-keys-lambda-key0 )
  (add flet-empty-key )
  (add tst-allow-other-keys-lambda-key0 )
  (add allow-other-keys-key2-reversed )
  (add flet-aux-default-second )
  (add mixed-args-two )
  (add tst-flet-key-second )
  (add tst-key-reversed )
  (add tst-flet-supplied-and-rest-all )
  (add tst-supplied-and-rest-two )
  (add self-eval-symbol )
  (add tst-eval-when-not-top-value )
  (add flet-allow-other-keys-lambda-key1 )
  (add tst-flet-allow-other-keys-lambda-key1 )
  (add tst-allow-other-keys-lambda-key1 )
  (add tst-mixed-args-as-req-and-opt )
  (add supplied-and-rest-none )
  (add flet-allow-other-keys-lambda-key2 )
  (add tst-flet-allow-other-keys-lambda-key2 )
  (add tst-allow-other-keys-lambda-key2 )
  (add allow-other-keys-key2 )
  (add aux-default-first )
  (add flet-mixed-args-two )
  (add key-second )
  (add tst-self-eval-nil )
  (add aux-default-both )
  (add aux-default-second )
  (add aux-default )
  (add tst-eval-special )
  (add defun-nontop )
  (add lambda-macro )
  (add allow-other-keys-key )
  (add tst-flet-allow-other-keys-key2 )
  (add symbol-keywords )
  (add flet-required-and-optional-missing )
  (add tst-flet-required-and-optional-missing )
  (add supplied-and-rest-two )
  (add tst-required-and-optional-missing )
  (add a )
  (add tst-defparameter )
  (add tst-defun-implicit-block )
  (add tst-flet-aux-default-both )
  (add flet-key-second )
  (add b )
  (add tst-flet-mixed-args-one )
  (add tst-flet-supplied-and-rest-none )
  (add supplied-and-rest-three )
  (add nest-function )
  (add self-eval-keyword )
  (add c )
  (add redefined )
  (add tst-defun-fdef )
  (add tst-lambda-parameters-limit )
  (add tst-flet-aux-default-first )
  (add tst-flet-mixed-args-as-req-and-opt )
  (add tst-flet-supplied-and-rest-two )
  (add joe-sent-me )
  (add tst-aux-default-first )
  (add flet-mixed-args-key-first )
  (add flet-mixed-args-as-req-and-opt )
  (add tst-mixed-args-key-first )
  (add flet-key-reversed )
  (add tst-key-both )
  (add tst-defun-fdef2 )
  (add aux-empty-default )
  (add tst-flet-key-both )
  (add self-eval-number )
  (add *a-bound-parameter* )
  (add tst-defun-nontop )
  (add tst-lambda-macro )
  (add flet-allow-other-keys-lambda-key-and-lambda )
  (add tst-flet-allow-other-keys-lambda-key-and-lambda )
  (add allow-other-keys-lambda-key-and-lambda )
  (add tst-allow-other-keys-lambda-key-and-lambda )
  (add flet-aux-default-both )
  (add flet-aux-default )
  (add tst-mixed-args-one )
  (add flet-key-key-as-key-value )
  (add tst-key-key-as-key-value )
  (add flet-supplied-and-rest-three )
  (add flet-supplied-and-rest-one )
  (add secret )
  (add tst-defvar-no-init )
  (add tst-flet-mixed-args-key-first )
  (add key-key-as-required-value )
  (add required )
  (add tst-defconstant )
  (add defun-fdef )
  (add mixed-args-one )
  (add tst-key-first )
  (add key-none )
  (add flet-required )
  (add tst-supplied-and-rest-one )
  (add tst-self-eval-keyword )
  (add tst-eval-when-empty )
  (add tst-defvar )
  (add tst-flet-aux-default-second )
  (add tst-aux-default-second )
  (add flet-mixed-args-key-second )
  (add flet-key-none )
  (add defvar-no-init )
  (add flet-aux-default-first )
  (add tst-flet-aux-empty-default )
  (add flet-mixed-args-one )
  (add tst-flet-key-key-as-key-value )
  (add tst-flet-key-reversed )
  (add tst-flet-key-first )
  (add foo )
  (add eval-when-not-top-value )
  (add flet-allow-other-keys-key )
  (add tst-allow-other-keys-key )
  (add tst-aux-empty-default )
  (add tst-mixed-args-key-second )
  (add tst-key-key-as-required-value )
  (add key-first )
  (add flet-supplied-and-rest-none )
  (add required-and-optional-supplied )
  (add *a-bound-constant* )
  (add eval-when-definately-not-top )
  (add flet-key-first )
  (add tst-flet-supplied-and-rest-three )
  (add flet-required-and-optional-supplied )
  (add tst-flet-required-and-optional-supplied )
  (add supplied-and-rest-one )
  (add tst-required-and-optional-supplied )
  (add self-eval-nil )
  (add tst-self-eval-symbol )
  (add flet-mixed-args-key-reversed-and-suplicated )
  (add tst-flet-mixed-args-key-reversed-and-suplicated )
  (add mixed-args-key-reversed-and-suplicated )
  (add tst-mixed-args-key-reversed-and-suplicated )
  (add required-and-optional-missing )
  (add eval-lexical )
  (add *a-bound-variable* )
  (add tst-eval-when-none )
  (add eval-when-empty )
  (add tst-flet-allow-other-keys-key )
  (add flet-supplied-and-rest-all )
  (add tst-nest-function )
  (add defun-fdef2 )
  (add tst-aux-default-both )
  (add tst-aux-default )
  (add mixed-args-key-second )
  (add tst-flet-supplied-and-rest-one )
  (add tst-supplied-and-rest-all )
  (add eval-when-none )
  (add defun-implicit-block )
  (add allow-other-keys-lambda-key0 )
  (add flet-aux-empty-default )
  (add tst-aux1 )
  (add tst-flet-mixed-args-two )
  (add tst-flet-key-key-as-required-value )
  (add key-reversed )
  (add tst-supplied-and-rest-three )
  (add tst-supplied-and-rest-none )
))
#+nn
(eclipse:with-output-to-string (s)
  (macrolet ((add (x)
		  `(progn (eclipse::common-symbol s ',x)
			  (setf (gethash ',x *test-symbols*)
				(string (eclipse:get-output-stream-string s))))))

  (add TST-UNWIND-PROTECT-GO-EXIT )
  (add NONLOCAL-THROW-VALUES )
  (add TST-IF-VALUES )
  (add TST-NTH-VALUE-1 )
  (add VALUES-LIST-EMPTY )
  (add PROG*-EMPTY )
  (add TST-MAPLIST2 )
  (add DOTIMES1 )
  (add TST-DO-C )
  (add TST-BLOCK-BREAKS-UP-CATCHERS )
  (add TST-TYPECASE-NIL )
  (add TST-FLET )
  (add TST-EMPTY-LET )
  (add PROG1B )
  (add CALL-ARGUMENTS-LIMIT-WORKS )
  (add TST-FUNCALL-KEYS )
  (add TST-PSETQ-SYMBOL-MACRO )
  (add TST-LOCAL-SEQUENTIAL-ASSIGNMENT )
  (add CLOSURE-BINDINGS )
  (add *FOO* )
  (add MANY-PARAMETERS )
  (add UNWIND-PROTECT-NONLOCAL-THROW-SPECIAL-EXIT )
  (add TST-UNWIND-PROTECT-NONLOCAL-THROW-SPECIAL-EXIT )
  (add TST-IF-TEST-VALUES2 )
  (add FUNCTION-ARGUMENT-NO-VALUES )
  (add FUNCTION-ARGUMENT-VALUES )
  (add CATCH-VALUES )
  (add TST-NTH-VALUE-2 )
  (add TST-MULTIPLE-VALUE-SETQ-EMPTY )
  (add TST-MULTIPLE-VALUES-LIMIT )
  (add TST-MAPLIST3 )
  (add DOTIMES2 )
  (add TST-DO-D )
  (add DO-A )
  (add TST-RETURN-FROM-MVC-MVP-CAPTURED )
  (add TST-TYPECASE-INTEGER )
  (add TYPECASE-FLOAT )
  (add TST-FALSE-IF )
  (add TST-EMPTY-BINDINGS* )
  (add TST-EMPTY-BINDINGS )
  (add FUNCALL-BOUND-SYMBOL )
  (add TST-PSETQ-SWAP )
  (add FOO2 )
  (add SET-XY )
  (add UNWIND-PROTECT-RETURN-EXIT )
  (add UNWIND-PROTECT-NONLOCAL-THROW-EXIT )
  (add TST-UNWIND-PROTECT-NONLOCAL-THROW-EXIT )
  (add TST-FUNCTION-ARGUMENT-VALUES )
  (add RETURN-FROM-VALUES )
  (add IF-COMPLEX-NEG )
  (add IF-SIMPLE-STATEMENT )
  (add TST-CASE-VALUES )
  (add TST-APPLY-VALUES )
  (add MULTIPLE-VALUE-SETQ-LONG )
  (add DO-B )
  (add TST-CASE-NORMAL )
  (add MISSING-INITS )
  (add MIXED-BINDING-ORDER )
  (add SEQUENCE-ORDER )
  (add TST-DEFINE-SETF-EXPANDER )
  (add FDEFINITION-SIMPLE )
  (add BOXES )
  (add TEMP-ONE )
  (add MANY-VALUES )
  (add XY )
  (add TST-UNWIND-PROTECT-THROW-EXIT )
  (add TST-OR-VALUES )
  (add IF-VALUES )
  (add TST-MULTIPLE-VALUE-SETQ-LONG )
  (add FUNCTION-MULTIPLE-VALUE-CALL )
  (add DO-C )
  (add TST-RETURN-FROM-MVC-CAPTURED-MVP )
  (add TST-NESTED-INNER-NONLOCAL-BLOCK )
  (add BLOCK-AS-RETURN )
  (add BINDINGS* )
  (add EMPTY-LET )
  (add TST-EMPTY-SEQUENCE )
  (add TST-SETF-EMPTY )
  (add FDEFINITION-SETF )
  (add APPENDF )
  (add ADDER )
  (add THROW-INNER )
  (add TST-NO-THROW )
  (add THE-VALUES )
  (add BLOCK-VALUES )
  (add COND-VALUES2 )
  (add IF-SIMPLE-VALUES )
  (add GO-OUT-OF-THROW-IN-MVC )
  (add TST-GO-OUT-OF-THROW )
  (add TST-DOLIST-ENV-VALUE )
  (add DOLIST-ENV-VALUE-EMPTY )
  (add DO-D )
  (add RETURN-FROM-THROW-MVC )
  (add NESTED-OUTER-NONLOCAL-BLOCK )
  (add EMPTY-BLOCK )
  (add TST-CASE-OTHERWISE )
  (add CASE-T )
  (add TST-EMPTY-CASE-CLAUSE )
  (add MISSING-PROGV-VALUES )
  (add TST-EMPTY-PROGV )
  (add MIXED-BINDING-ORDER2* )
  (add EMPTY-LET* )
  (add EMPTY-BINDINGS )
  (add APPLY-KEYS )
  (add TST-SETF-LONG )
  (add TST-LOCAL-SETQ-SYMBOL-MACRO )
  (add TST-SPECIAL-SEQUENTIAL-ASSIGNMENT )
  (add TST-FBOUNDP )
  (add ON )
  (add MULTIPLE-VALUE-FUNCTION )
  (add TST-UNWIND-PROTECT-VALUES )
  (add TST-COND-VALUES-SINGLETON2 )
  (add COND-VALUES3 )
  (add TST-IF-SIMPLE-VALUES-NEG-STATEMENT )
  (add ECASE-VALUES )
  (add LET-VALUES )
  (add LOCAL-TAGBODY )
  (add TAGBODY-NO-LABELS )
  (add TST-EMPTY-TAGBODY )
  (add MAPCAN1 )
  (add TST-RETURN-FROM-THROW )
  (add TST-MIXED-BINDING-ORDER2* )
  (add TST-MIXED-BINDING-ORDER2 )
  (add EMPTY-PSETQ )
  (add SPECIAL-SETQ-SYMBOL-MACRO )
  (add POLLYANNA )
  (add Z )
  (add UNWIND-PROTECT-VALUES2 )
  (add OR-VALUES )
  (add IF-SIMPLE-VALUES-NEG-STATEMENT )
  (add IF-SIMPLE-NEG )
  (add TST-EVAL-WHEN-VALUES )
  (add MAPCAN2 )
  (add TST-NORMALLY-EXITED-BLOCK )
  (add TYPECASE-LIST )
  (add TST-SYMBOL-MACROLET )
  (add BINDING-ORDER* )
  (add TST-NESTED-AND-EMPTY-LETS )
  (add EMPTY-SEQUENCE )
  (add FUNCALL-NULL-ARGS )
  (add DEFSETF-SHORT )
  (add NO-RETURN-VALUE )
  (add TEMP )
  (add EXAMPLE-SUBSEQ )
  (add IF-TEST-VALUES2 )
  (add TST-VALUES-LIST-EMPTY )
  (add NONLOCAL-TAGBODY2 )
  (add MPACAR3 )
  (add DOTIMES-PALINDROME )
  (add DOLIST1 )
  (add NESTED-OUTER-DOUBLE-NONLOCAL-BLOCK )
  (add TST-NESTED-OUTER-DOUBLE-NONLOCAL-BLOCK )
  (add CASE-OTHERWISE )
  (add UNUSED-MISSING-CONSEQUENT )
  (add TST-EXTRA-PROGV-VALUES )
  (add BINDING-ORDER )
  (add SETF-LONG )
  (add TST-PSETF )
  (add PSETQ-SWAP )
  (add DEFUN-CLOSURE )
  (add UNWIND-PROTECT-GO-EXIT )
  (add TST-CATCH-VALUES )
  (add WHEN-VALUES )
  (add TST-MULTIPLE-VALUE-BIND )
  (add TST-DOUBLE-NONLOCAL-TAGBODY )
  (add DOLIST2 )
  (add TST-RETURN-FROM-MVC-MVC )
  (add COND-NORMAL )
  (add COND-VALUES )
  (add TST-USED-MISSING-CONSEQUENT )
  (add TST-SPECIAL-BINDING-ORDER )
  (add TST-APPLY-BOUND-SYMBOL )
  (add TST-ROTATEF )
  (add TST-SHIFTF )
  (add SETF-THE )
  (add SHOULD-BE-CLEAR )
  (add NEW-SEQUENCE )
  (add SETQ-VALUES2 )
  (add NONLOCAL-RETURN-FROM-BREAKING-UP-CATCH-VALUES )
  (add TST-NONLOCAL-RETURN-FROM-BREAKING-UP-CATCH-VALUES )
  (add TST-IF-COMPLEX )
  (add TST-IF-SIMPLE-VALUES-STATEMENT )
  (add TST-COND-NONE )
  (add TST-FUNCALL-SYMBOL2 )
  (add TST-SETF-LONG-ENV )
  (add SETF-EMPTY )
  (add TST-SPECIAL-SETQ-SYMBOL-MACRO )
  (add THROWER )
  (add LOCAL-FUNC )
  (add TWO-VALUES )
  (add UNWIND-PROTECT-VALUES )
  (add NONLOCAL-RETURN-FROM-VALUES )
  (add TST-FUNCALL-VALUES )
  (add TST-FUNCTION-MULTIPLE-VALUE-CALL2 )
  (add EMPTY-MULTIPLE-VALUE-CALL2 )
  (add TST-PROG-EMPTY )
  (add TST-GO-OUT-OF-MVC )
  (add GO-OUT-OF-THROW )
  (add TST-EMPTY-CASE )
  (add TST-BINDINGS* )
  (add TST-CALL-ARGUMENTS-LIMIT-WORKS )
  (add APPLY-SYMBOL2 )
  (add TST-LOCAL-SETQ-ORDER )
  (add LOCAL-SIMPLE-SETQ )
  (add PALINDROMEP )
  (add RIBCAGE-LOOKUP )
  (add TST-THROW )
  (add UNWIND-PROTECT-NONLOCAL-SPECIAL-GO-EXIT )
  (add TST-UNWIND-PROTECT-NONLOCAL-SPECIAL-GO-EXIT )
  (add EMPTY-CATCH )
  (add THROW-VALUES )
  (add TST-BLOCK-VALUES )
  (add TST-COND-VALUES2 )
  (add TST-LOCALY-VALUES )
  (add NTH-VALUE-0 )
  (add TST-LOCAL-BLOCK )
  (add NORMALLY-EXITED-BLOCK )
  (add NESTED-AND-EMPTY-LETS )
  (add TST-APPLY-NULL-ARGS )
  (add APPLY-SYMBOL )
  (add TST-SET )
  (add LOCAL-SEQUENTIAL-ASSIGNMENT )
  (add QUOTIENT )
  (add SEEN )
  (add STORE )
  (add HELLO )
  (add ALPHA )
  (add SET-MIDDLEGUY )
  (add UNWIND-PROTECT-NONLOCAL-GO-EXIT )
  (add TST-UNWIND-PROTECT-NONLOCAL-GO-EXIT )
  (add UNWIND-PROTECT-NONLOCAL-RETURN-EXIT )
  (add TST-UNWIND-PROTECT-NONLOCAL-RETURN-EXIT )
  (add TST-UNWIND-PROTECT-RETURN-EXIT )
  (add UNWIND-PROTECT-NORMAL-EXIT )
  (add TST-COND-VALUES3 )
  (add IF-SIMPLE-NEG-STATEMENT )
  (add IF-SIMPLE-VALUES-NEG )
  (add TST-ECASE-VALUES )
  (add UNLESS-VALUES )
  (add TST-LET*-VALUES )
  (add NTH-VALUE-1 )
  (add TST-FUNCTION-MULTIPLE-VALUE-CALL )
  (add EMPTY-MULTIPLE-VALUE-CALL )
  (add TST-MULTIPLE-VALUES-LIMIT-WORKS )
  (add TST-TAGBODY-NO-LABELS )
  (add TST-MAPCAN1 )
  (add TST-DO-PARALLEL )
  (add RETURN-FROM-MVC-EXIT )
  (add COND-NONE )
  (add TST-LABELS )
  (add UNQUOTED )
  (add SILLY )
  (add BAR )
  (add STUFF )
  (add REPORT-PROGV-SPECIALS )
  (add COND-VALUES-SINGLETON2 )
  (add DEFUN-VALUES )
  (add FUNCALL-VALUES )
  (add NTH-VALUE-2 )
  (add MULTIPLE-VALUE-SETQ-SHORT )
  (add MULTIPLE-VALUE-CALL2 )
  (add VALUES-LIST1 )
  (add TST-NONLOCAL-TAGBODY )
  (add TST-MAPCAN2 )
  (add MAPCAR1 )
  (add TST-DO* )
  (add TYPECASE-INTEGER )
  (add TST-UNLESS )
  (add TST-UNUSED-MISSING-CONSEQUENT )
  (add TST-BINDING-ORDER* )
  (add SPECIAL-BINDING-ORDER )
  (add TST-FUNCALL-NULL-ARGS )
  (add TST-EMPTY-SETQ )
  (add OUT )
  (add OUTPUTS )
  (add TST-SETQ-VALUES )
  (add DOLIST-VALUES )
  (add TST-RETURN-FROM-VALUES )
  (add CASE-VALUES )
  (add EMPTY-MULTIPLE-VALUE-PROG1 )
  (add VALUES-ORDER )
  (add TST-NO-VALUES )
  (add TST-NONLOCAL-TAGBODY2 )
  (add TST-MPACAR3 )
  (add MAPCAR2 )
  (add TST-DOTIMES1 )
  (add TST-DOLIST1 )
  (add NESTED-INNER-NONLOCAL-BLOCK )
  (add NESTED-OUTER-LOCAL-BLOCK )
  (add CASE-NORMAL )
  (add TST-MACROLET )
  (add TST-FUNCALL-BOUND-SYMBOL )
  (add TST-APPLY-FUNCTION )
  (add TST-FDEFINITION-SIMPLE )
  (add UNWIND-PROTECT-CATCH )
  (add EMPTY-UNWIND-PROTECT )
  (add IF-COMPLEX )
  (add LET*-VALUES )
  (add VALUES-LIST3 )
  (add TST-DOTIMES2 )
  (add TST-DOLIST2 )
  (add BLOCK-BREAKS-UP-CATCHERS2 )
  (add TST-NESTED-OUTER-LOCAL-BLOCK )
  (add TRUE-IF )
  (add MIXED-BINDING-ORDER* )
  (add TST-BINDINGS )
  (add FUNCALL-SYMBOL2 )
  (add TST-FUNCALL-FUNCTION )
  (add TST-SETF-LOCALS )
  (add SPECIAL-SETQ-ORDER )
  (add THERE )
  (add BOX )
  (add MIDDLEGUY )
  (add E )
  (add ONE )
  (add TST-SETQ-VALUES2 )
  (add CASE-VALUES2 )
  (add MULTIPLE-VALUE-SETQ-NONE )
  (add TST-EMPTY-MULTIPLE-VALUE-CALL )
  (add PROG-EMPTY )
  (add MAPLIST1 )
  (add DOLIST-ENV-VALUE )
  (add EMPTY-CASE )
  (add EMPTY-PROGV )
  (add TST-MISSING-INITS )
  (add TST-QUOTE )
  (add HI )
  (add TST-AND-VALUES )
  (add TST-MULTIPLE-VALUE-SETQ-NONE )
  (add TST-MULTIPLE-VALUE-SETQ-SHORT )
  (add TST-MAPC )
  (add MAPLIST2 )
  (add RETURN-FROM-MVC-MVC )
  (add TST-MISSING-PROGV-VALUES )
  (add NESTED-AND-EMPTY-LETS* )
  (add TST-SEQUENCE )
  (add APPLY-NULL-ARGS )
  (add TST-LOCAL-SIMPLE-SETQ )
  (add TST-SYMBOL-FUNCTION )
  (add LOSER )
  (add NO-VALUES )
  (add SOMETHING )
  (add LASTGUY )
  (add G )
  (add TST-THROW-VALUES )
  (add EVAL-WHEN-VALUES )
  (add TST-PROG )
  (add MAPLIST3 )
  (add TST-RETURN )
  (add TST-RETURN-FROM-MVC )
  (add BLOCK-LABELS-NOT-DYNAMIC )
  (add FALSE-IF )
  (add SPECIAL-BINDING-ORDER* )
  (add TST-EMPTY-LET* )
  (add TST-SPECIAL-BINDING )
  (add TST-PROG1A )
  (add TST-APPLY-SYMBOL )
  (add TST-PSETQ )
  (add TST-SPECIAL-SIMPLE-SETQ )
  (add TST-SPECIAL-OPERATOR-P1 )
  (add TST-SYMBOL-VALUE )
  (add H )
  (add BANANA )
  (add INPUTS )
  (add UNIONF )
  (add LIST-SPECIALS )
  (add TST-IF-VALUES2 )
  (add TST-MULTIPLE-VALUE-PROG1-2 )
  (add TST-MULTIPLE-VALUE-CALL )
  (add TST-LOCAL-TAGBODY )
  (add TST-DOTIMES-PALINDROME )
  (add TST-BLOCK-BREAKS-UP-CATCHERS2 )
  (add TST-BLOCK-LABELS-NOT-DYNAMIC )
  (add MISSING-INITS* )
  (add TST-PROG1B )
  (add PSETQ-SYMBOL-MACRO )
  (add SPECIAL-SEQUENTIAL-ASSIGNMENT )
  (add EMPTY-SETQ )
  (add TST-SPECIAL-OPERATOR-P2 )
  (add CLOSURE-BINDINGS2 )
  (add TST-CLOSURE-BINDINGS )
  (add I )
  (add TEMP-TWO )
  (add SWAP-SYMBOL-VALUES )
  (add GOODY )
  (add MIDDLEGUY-SYMBOL )
  (add TST-IF-SIMPLE-NEG )
  (add TST-IF-SIMPLE )
  (add TST-DEFUN-VALUES )
  (add PROGN-VALUES )
  (add EMPTY-MULTIPLE-VALUE-PROG1-VALUES )
  (add TST-EMPTY-MULTIPLE-VALUE-PROG1-VALUES )
  (add TST-EMPTY-MULTIPLE-VALUE-CALL2 )
  (add TST-VALUES-LIST1 )
  (add TST-MAPCAR1 )
  (add TST-TYPECASE-LIST )
  (add NO-PROGV-BINDINGS )
  (add EMPTY-BINDINGS* )
  (add TST-DEFSETF-SHORT )
  (add LOCAL-SETQ-SYMBOL-MACRO )
  (add TST-SPECIAL-OPERATOR-P3 )
  (add BAZ )
  (add SOME-VALUES )
  (add *XY* )
  (add NO-THROW )
  (add IF-TEST-NO-VALUES )
  (add TST-FUNCTION-ARGUMENT-NO-VALUES )
  (add PROGV-VALUES )
  (add TST-MULTIPLE-VALUE-LIST )
  (add TST-VALUES-ORDER )
  (add TST-MAPCAR2 )
  (add TST-RETURN-FROM-MVC-MVP )
  (add EMPTY-COND-CLAUSE-VALUES )
  (add TST-WHEN )
  (add TST-NESTED-AND-EMPTY-LETS* )
  (add TST-SPECIAL-BINDING* )
  (add TST-BINDING-ORDER )
  (add TST-DEFUN-CLOSURE )
  (add GOER )
  (add TST-UNWIND-PROTECT-NORMAL-EXIT )
  (add TST-IF-TEST-VALUES )
  (add TST-VALUES-LIST3 )
  (add EMPTY-TAGBODY )
  (add TST-EMPTY-COND-CLAUSE-VALUES )
  (add EMPTY-COND-CLAUSE )
  (add TST-TRUE-IF )
  (add TST-SPECIAL-BINDING-ORDER* )
  (add TST-DEFINE-MODIFY-MACRO )
  (add TST-SETF-THE )
  (add LOCAL-SETQ-ORDER )
  (add TST-FDEFINITION-SETF )
  (add TRASH )
  (add TST-THROW-INNER )
  (add AND-VALUES )
  (add TST-IF-SIMPLE-VALUES )
  (add IF-SIMPLE )
  (add TST-CASE-VALUES2 )
  (add TST-TAGBODY-UNUSED-LABELS )
  (add NESTED-INNER-LOCAL-BLOCK )
  (add LOCAL-BLOCK )
  (add TST-EMPTY-BLOCK )
  (add TST-TYPECASE-SYMBOL )
  (add TST-CASE-T )
  (add MIXED-BINDING-ORDER2 )
  (add TST-PROG1 )
  (add TST-BOUNDP )
  (add TYPECASE-TEST )
  (add TST-COND-VALUES-SINGLETON )
  (add TST-IF-SIMPLE-STATEMENT )
  (add TST-EMPTY-MULTIPLE-VALUE-PROG1 )
  (add DOUBLE-NONLOCAL-TAGBODY )
  (add DO-PARALLEL )
  (add RETURN-FROM-MVC )
  (add TST-NESTED-OUTER-NONLOCAL-BLOCK )
  (add TST-NESTED-INNER-LOCAL-BLOCK )
  (add TYPECASE-NIL )
  (add TST-EMPTY-COND )
  (add USED-MISSING-CONSEQUENT )
  (add TST-MIXED-BINDING-ORDER )
  (add SPECIAL-BINDING )
  (add TST-PROG2 )
  (add FUNCALL-KEYS )
  (add TST-APPLY-SYMBOL2 )
  (add TST-EMPTY-PSETQ )
  (add UNWIND-PROTECT-NONLOCAL-SPECIAL-RETURN-EXIT )
  (add TST-UNWIND-PROTECT-NONLOCAL-SPECIAL-RETURN-EXIT )
  (add IF-TEST-VALUES )
  (add TST-IF-SIMPLE-VALUES-NEG )
  (add IF-VALUES2 )
  (add FUNCTION-MULTIPLE-VALUE-CALL2 )
  (add MULTIPLE-VALUES-LIMIT-WORKS )
  (add NONLOCAL-TAGBODY )
  (add TST-RETURN-FROM-MVC-EXIT )
  (add RETURN-FROM-MVC-MVP-CAPTURED )
  (add TST-NONLOCAL-BLOCK )
  (add A-VECTOR )
  (add FUNS )
  (add TWO-FUNS )
  (add SETQ-VALUES )
  (add TST-NONLOCAL-THROW-VALUES )
  (add TST-UNLESS-VALUES )
  (add APPLY-VALUES )
  (add TST-MULTIPLE-VALUE-CALL2 )
  (add TST-LOCAL-TAGBODY2 )
  (add TST-MAPL )
  (add TST-DO-BLOCK-SCOPE )
  (add TST-NONLOCAL-RETURN-FROM-THROW-MVC )
  (add EXTRA-PROGV-VALUES )
  (add TST-MISSING-INITS* )
  (add TST-FUNCALL-SYMBOL )
  (add SETF-LONG-ENV )
  (add TST-CLOSURE-BINDINGS2 )
  (add TST-UNQUOTED )
  (add SOME-IDENTITY-FUNCTION )
  (add *BAR* )
  (add TST-IF-SIMPLE-NEG-STATEMENT )
  (add TST-WHEN-VALUES )
  (add TST-PROGN-VALUES )
  (add MULTIPLE-VALUE-PROG1-2 )
  (add TST-PROG* )
  (add GO-OUT-OF-MVC )
  (add TST-GO-OUT-OF-THROW-IN-MVC )
  (add TST-DOLIST-ENV-VALUE-EMPTY )
  (add TST-DO-NESTED )
  (add RETURN-FROM-MVC-CAPTURED-MVP )
  (add NONLOCAL-RETURN-FROM-THROW-MVC )
  (add TST-COND-NORMAL )
  (add TST-COND-VALUES )
  (add TST-NO-PROGV-BINDINGS )
  (add APPLY-BOUND-SYMBOL )
  (add SETF-LOCALS )
  (add TST-SPECIAL-SETQ-ORDER )
  (add SPECIAL-SIMPLE-SETQ )
  (add SPECIAL-OPERATOR-P1 )
  (add REMAINDER )
  (add NEW-INCF )
  (add TWO-SHOES )
  (add LASTGUY-SYMBOL )
  (add UNWIND-PROTECT-THROW-EXIT )
  (add TST-UNWIND-PROTECT-CATCH )
  (add TST-EMPTY-UNWIND-PROTECT )
  (add TST-IF-TEST-NO-VALUES )
  (add TST-DOLIST-VALUES )
  (add TST-NONLOCAL-RETURN-FROM-VALUES )
  (add LOCALY-VALUES )
  (add TST-PROGV-VALUES )
  (add MULTIPLE-VALUE-SETQ-EMPTY )
  (add TST-VALUES )
  (add TST-PROG*-EMPTY )
  (add TAGBODY-UNUSED-LABELS )
  (add NONLOCAL-BLOCK )
  (add TST-BLOCK-AS-RETURN )
  (add EMPTY-CASE-CLAUSE )
  (add SPECIAL-OPERATOR-P2 )
  (add R )
  (add TST-THE-VALUES )
  (add TST-UNWIND-PROTECT-VALUES2 )
  (add COND-VALUES-SINGLETON )
  (add TST-MULTIPLE-VALUE-SETQ )
  (add LOCAL-TAGBODY2 )
  (add DO-BLOCK-SCOPE )
  (add TST-DO-A )
  (add RETURN-FROM-THROW )
  (add TYPECASE-SYMBOL )
  (add TST-TYPECASE-FLOAT )
  (add TST-EMPTY-COND-CLAUSE )
  (add TST-PROGV )
  (add TST-CALL-ARGUMENTS-LIMIT )
  (add FUNCALL-SYMBOL )
  (add TST-APPLY-KEYS )
  (add SPECIAL-OPERATOR-P3 )
  (add DUMMY )
  (add WW )
  (add TROUBLE )
  (add XXY )
  (add TST-EMPTY-CATCH )
  (add TST-IF-COMPLEX-NEG )
  (add IF-SIMPLE-VALUES-STATEMENT )
  (add TST-LET-VALUES )
  (add TST-NTH-VALUE-0 )
  (add TST-MULTIPLE-VALUE-PROG1 )
  (add TST-MAPLIST1 )
  (add DO-NESTED )
  (add TST-DO-B )
  (add RETURN-FROM-MVC-MVP )
  (add TST-RETURN-FROM-THROW-MVC )
  (add BLOCK-BREAKS-UP-CATCHERS )
  (add EMPTY-COND )
  (add TST-MIXED-BINDING-ORDER* )
  (add SPECIAL-BINDING* )
  (add PROG1A )
  (add TST-SEQUENCE-ORDER )
  (add RETURNER )
  ))
